<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重新認識 Vue3 - 基礎</title>
      <link href="posts/677b/"/>
      <url>posts/677b/</url>
      
        <content type="html"><![CDATA[<h2 id="應用-組件實例">應用 &amp; 組件實例</h2><h3 id="應用實例">應用實例</h3><p>每個 Vue 應用都是透過 <code>createApp</code> 函式創建一個新的 <em>應用實例</em> 開始的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = vue.createApp(&#123;<br>  <span class="hljs-comment">/* 選項 */</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>該應用實例用於在應用中 <em>註冊全局組件</em> 的。</p><p>應用實例暴露的大部分方法都會返回同一實例，代表允許鏈式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;&#125;)<br>  .component(<span class="hljs-string">&#x27;SearchInput&#x27;</span>, SearchInputComponent)<br>  .directive(<span class="hljs-string">&#x27;focus&#x27;</span>, FocusDirective)<br>  .use(LocalePlugin)<br></code></pre></td></tr></table></figure><h3 id="根組件">根組件</h3><p>傳遞給 <code>createApp</code> 的選項用於設定根組件。當掛載應用時，該組件被用作渲染的起點。</p><p>一個應用需要被掛載到 DOM 元素中。例如把一個 Vue 應用掛載到 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> RootComponent = &#123;<br>  <span class="hljs-comment">// 根組件選項</span><br>&#125;<br><br><span class="hljs-comment">// 創建應用實例</span><br><span class="hljs-keyword">const</span> app = Vue.createApp(RootComponent)<br><br><span class="hljs-comment">// 掛載應用至 DOM</span><br><span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>) <span class="hljs-comment">// 返回組件實例</span><br></code></pre></td></tr></table></figure><p>與大多數應用實例方法不同的是，<code>mount</code> 不返回應用本身。但是，它會返回組件實例。</p><blockquote><p>Vue 雖然沒有完全遵循 MVVM 模型，但是 Vue 的設計受到了它的啟發。<br>因此經常使用 <code>vm</code>（ViewModel）變量名 表示組件實例。</p></blockquote><h3 id="組件實例-property">組件實例 property</h3><p>在組件選項中定義的 <code>data</code> property 是透過組件實例暴露的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">// property</span><br>      count: <span class="hljs-number">4</span><br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(vm.$data.count) <span class="hljs-comment">// 4</span><br><span class="hljs-built_in">console</span>.log(vm.count) <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>還有更多 組件選項 可以將自訂義的 property 添加到組件實例中，例如 <code>methods</code>, <code>props</code>, <code>computed</code>, <code>inject</code> 和 <code>setup</code> 。</p><p>Vue 還通過組件實例暴露了一些內置 property，如 <code>$attrs</code> 和 <code>$emit</code>。這些 property 都有一個 <code>$</code> 前餟，以避免和自訂義的 property 名稱衝突。</p><h3 id="生命週期鉤子">生命週期鉤子</h3><p>每個組件在被創建時都會經過一系列初始化過程。例如，設定數據監聽、編譯模板、掛載實例到 DOM 並在數據變化時更新 DOM 等。同時在這過程中也會調用一些叫做 <em>生命週期鉤子</em> 的函式，這允許開發者在不同階段添加自己程式碼的機會。</p><p>比如 created 鉤子可以用來在一個實例被創建之後調用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      count: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// created : 當該實例被 Vue 創建時調用</span><br>  created() &#123;<br>    <span class="hljs-comment">// this 指向 vm 實例，vm 實例暴露了 data property</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`count is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.count&#125;</span>`</span>) <span class="hljs-comment">// &#x27;count is 1&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>還有更多鉤子，它們在生命週期不同階段時被調用，例如 <code>mounted</code>, <code>updated</code> 和 <code>unmounted</code>，生命週期鉤子的 <code>this</code> 指向調用該鉤子的當前實例。</p><div class="note info flat"><p>不要在選項 property 或 回調函式 上使用箭頭函式，因為 箭頭函式 沒有 this。</p></div><h3 id="生命週期圖">生命週期圖</h3><p><img src="/posts/677b/lifecycle_zh-TW.svg" alt="Vue3生命週期圖"></p><h2 id="模板語法">模板語法</h2><p>Vue 使用了基於 HTML 的模板語法，允許開發者聲明式地將 DOM 綁定至底層組件實例的數據。所有 Vue 的模板都是合法的 HTML，所以能被遵循規範的瀏覽器和 HTML 解析器解析。</p><p>在底層的實現上，Vue 將模板編譯成虛擬 DOM 渲染函式。結合響應性系統，Vue 能夠智能地計算出最少需要重新渲染多少組件，並把 DOM 操作次數減到最少。</p><h3 id="插值">插值</h3><h4 id="文本">文本</h4><p>數據綁定最常見的形式就是使用 “Mustache” 語法（雙大括號）的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mustache 標籤將會被替代為對應組件實例中 msg property 的值。無論何時，綁定的組件實例上msg property 發生了改變，插值處的內容都會更新。</p><p>透過 <code>v-once</code> 指令，也能改為一次性插值，當數據改變時，插值處的內容不會更新。但這會影響到該結點上的其他數據綁定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>這個 msg 將不會更新 : &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="原始-HTML">原始 HTML</h4><p>雙大括號會將數據解釋為普通文本，而非 HTML 元素。為了輸出 HTML 元素，需要使用 <code>v-html</code>　指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>這將輸出 普通文本 : &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>這將輸出 HTML 元素 : <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span>這些內容會被替換為 rawHtml 的值<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這個 span 的內容將會被替換成為 property rawHtml 的值，需要注意的是，property 值中的數據綁定會被忽略。</p><blockquote><p>在網頁上動態任意渲染 HTML 是非常危險的，<br>因為它很容易被 XSS (Cross-site scripting) 攻擊。<br>請只對可信內容使用 HTML 插值，絕對不要將用戶提供的內容做為插值。</p></blockquote><h4 id="Attribute">Attribute</h4><p>Mustache（雙大括號）語法不能在 HTML attribute 中使用，但可以使用 <code>v-bind</code> 指令代替：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 這個 id 將會是動態的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果綁定的值是 <code>null</code> 或 <code>undefined</code>，那麼該 attribute 就不會被包含在渲染的元素上（被省略）。</p><p>對於布林值類型的 attribute，<code>v-bind</code> 的處理方式稍有不同：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:disabled</span>=<span class="hljs-string">&quot;isButtonDisabled&quot;</span>&gt;</span>按紐<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>當 <code>isButtonDisabled</code> 為 <em>truthy</em> 時：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>&gt;</span>按紐<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>當 <code>isButtonDisabled</code> 為 <em>falsy</em> 時：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- disabled attribute 直接被省略 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按紐<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="JavaScript-表達式">JavaScript 表達式</h4><p>Mustache（雙大括號）語法 和 指令 支援 <em>JavaScript 表達式</em>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>The count is : &#123;&#123; count + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>ok ? &#x27;Yes&#x27; : &#x27;No&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>翻轉字串 : &#123;&#123; msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;&#x27;list&#x27; + id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="指令">指令</h3><p>指令（Directives）是帶有 <code>v-</code> 前餟的特殊 attribute。</p><p>指令 attribute 的值預期是 <em>單個 JavaScript 表達式</em>（ <code>v-for</code> 和 <code>v-on</code> 是例外）。</p><p>指令的職責是，當表達式的值改變時，將其產生的連帶影響，響應式地作用於 DOM。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>你能看到我嗎？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這裡的 <code>v-if</code> 指令將根據表達式 <code>seen</code> 的值 的 <code>truthy / falsy</code> 對應 <code>插入 / 移除</code> <code>&lt;p&gt;</code> 元素。</p><h4 id="參數">參數</h4><p>有一些指令能夠接收 <em>一個參數</em>，在指令後方以冒號表示。</p><p>例如 <code>v-bind</code> 指令可用於響應式地更新 HTML attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 傳入 href attribute 給 v-bind 指令 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>猜猜這個連結會去哪？<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這裡的 <code>href</code> 是參數，告知 <code>v-bind</code> 指令將該元素的 <code>href</code> attribute 語表達式的 <code>url</code> 的值綁定。</p><p><code>v-on</code> 指令，它用於監聽 DOM 事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>猜猜點擊會發生什麼事？<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這裡的參數是 事件名稱。</p><h4 id="動態參數">動態參數</h4><p>傳入指令參數也可以使用 <em>JavaScript 表達式</em>，作法是用方括號括起來：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">attributeName</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>猜猜這個連結會去哪？<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這裡的 <code>attributeName</code> 會被做為 <em>JavaScript 表達式</em> 進行動態求值。<br>例如，如果組件實例有一個 data property <code>attributeName</code>，其值為 <code>'href'</code>，<br>那這個綁定同等於 <code>v-bind:href</code>。</p><h4 id="修飾符">修飾符</h4><p>修飾符（modifier）是以半角句號 <code>.</code> 的特殊後餟，用於指定一個指令應改以特殊的方式綁定。<br>例如，<code>.prevent</code> 修飾符告訴 <code>v-on</code> 指令對於處發事件的調用 <code>event.preventDefault()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 取消 form 在觸發 sumbit 的默認行為 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="縮寫">縮寫</h3><p><code>v-</code> 開頭具有視覺提示，但對於頻繁使用的指令就會感到繁瑣，<br>因此 Vue 提供了 <code>v-bind</code> 和 <code>v-on</code> 這兩個最常使用的指令提供了簡寫：</p><h4 id="v-bind-縮寫">v-bind 縮寫</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整語法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 縮寫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 動態參數的縮寫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="v-on-縮寫">v-on 縮寫</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整語法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 縮寫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 動態參數的縮寫 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注意事項">注意事項</h3><h4 id="動態參數的規定">動態參數的規定</h4><p>動態參數預期是一個字符串，異常下為 <code>null</code>。<br>任何非字符串的類型的值都將觸發一個警告。</p><h4 id="對動態參數表達是的規定">對動態參數表達是的規定</h4><p>動態參數表達式有一些語法約束，因為某些字符，如空格和引號，放在 HTML attribute 名裡是無效的。<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 這會觸發一個編譯警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[&#x27;<span class="hljs-attr">foo</span>&#x27; + <span class="hljs-attr">bar</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解決的辦法是使用沒有空格或引號的表達式，<br>或用 <code>computed</code> property（計算屬性） 替代這種複雜表達式。</p><p>在 DOM 中使用模板時 (直接在一個 HTML 檔案裡撰寫模板)，還需要避免使用大寫字符來命名鍵名，因為瀏覽器會把 attribute 名稱全部強制轉為小寫：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">在 DOM 中使用模板時這段動態參數會被轉換為 `v-bind:[someattr]`。</span><br><span class="hljs-comment">除非在實例中有一個名為“someattr”的 property。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">someAttr</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="JavaScript-表達式-2">JavaScript 表達式</h4><p>模板表達式都被放在沙盒中，只能使用全局變量的一個白名單，例如 Math 和 Date。<br>你不應該在模板表達式中試圖使用自定義的全局變量。</p><h2 id="Data-Property-和-方法">Data Property 和 方法</h2><h3 id="Data-Property">Data Property</h3><p>組件的 <code>data</code> 選項是一個函式。</p><p>Vue 在創建組件的實例過程中調用此函式，它應該返回一個物件，<br>然後 Vue 會透過響應式系統將其包裹起來，並以 <code>$data</code> 的形式儲存在組件實例中。</p><p>為了方便起見，該物件的所有頂級 property 也直接透過組件實例暴露出來：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.create(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      count: <span class="hljs-number">69</span><br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(vm.$data.count) <span class="hljs-comment">// 69</span><br>consol.log(vm.count) <span class="hljs-comment">// 69</span><br><br>vm.count = <span class="hljs-number">68</span><br><span class="hljs-built_in">console</span>.log(vm.$data.count) <span class="hljs-comment">// 68</span><br><br>vm.$data.count = <span class="hljs-number">67</span><br><span class="hljs-built_in">console</span>.log(vm.count) <span class="hljs-comment">// 67</span><br></code></pre></td></tr></table></figure><p>這些實例 property 僅在實例首次創建時被添加，所以需要確保它們都在 data 函式返回的物件中。<br>必要時，要對尚未提供所需值的 property 使用 <code>null</code> 或 <code>undefined</code> 或其他佔位的值。</p><p>直接將不包含在 data 中的新 property 添加到組件實例是可行的。<br>但由於該 property 不在背後的響應式 <code>$data</code> 物件內，所以 Vue 的響應式系統不會自動追蹤它。</p><p>Vue 使用 <code>$</code> 前綴通過組件實例暴露自己的內置 API。<br>它還為內部 property 保留 <code>_</code> 前綴。<br>應該避免使用這兩個字符開頭的的頂級 data property 名稱。</p><h3 id="方法">方法</h3><p>使用 <code>methods</code> 選項向組件實例添加方法，它是一個包含所需方法的物件，<br>Vue 會透過組件實例暴露該物件的所有頂級 property：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">4</span> &#125;<br>  &#125;,<br>  methods: &#123;<br>    increment() &#123;<br>      <span class="hljs-comment">// `this` 指向組件實例</span><br>      <span class="hljs-built_in">this</span>.count++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(vm.count) <span class="hljs-comment">// =&gt; 4</span><br><br>vm.increment()<br><br><span class="hljs-built_in">console</span>.log(vm.count) <span class="hljs-comment">// =&gt; 5</span><br></code></pre></td></tr></table></figure><p>Vue 自動為 <code>methods</code> 綁定 <code>this</code>，以便於它始終指向組件實例。<br>這將確保方法在用作事件監聽或回調時保持正確的 <code>this</code> 指向。<br>在定義 <code>methods</code> 時應避免使用箭頭函式，因為這會阻止 Vue 綁定恰當的 <code>this</code> 指向。</p><p>這些 <code>methods</code> 和組件實例的其它所有 property 一樣可以在組件的模板中被訪問。<br>在模板中，它們通常被當做事件監聽使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>投票<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上這個例子，點擊按鈕時就會調用 <code>increment</code> 方法。</p><p>也可以直接從模板中調用方法。，通常換做 <code>計算屬性</code> 會更好。<br>但是，在 <code>計算屬性</code> 不可行的情況下，使用方法可能會很有用。<br>你可以在模板支持 <code>JavaScript 表達式</code> 的任何地方調用方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;toTitleDate(date)&quot;</span>&gt;</span><br>  &#123;&#123; formatDate(date) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果 <code>toTitleDate</code> 或 <code>formatDate</code> 訪問任何響應式數據，則將其作為渲染依賴項進行追蹤，就像直接在模板中使用過一樣。</p><p>從模板調用的方法不應該有任何副作用，比如更改數據或觸發異步進程。不過這應該要使用生命週期鉤子。</p><blockquote><p>這裡指的 更改數據 是指 <code>ref</code> 或者 <code>reactive</code> 的數據。（會導致重新渲染頁面）</p></blockquote><h3 id="防抖與節流">防抖與節流</h3><blockquote><p>函式防抖 與 函式節流 主要用於優化高頻率執行 JavaScript 程式碼的一種手段。<br>函式防抖：在一段連續操作結束後，處理回調。（主要利用 clearTimeout 和 setTimeout 實現）<br>函式節流：在一段連續操作中，每段時間只執行一次（只利用了 setTimeout 實現）</p></blockquote><p>Vue 沒有內置支援防抖和節流，但可以使用 Loadash 第三方庫實現。</p><p>如果某個組件僅使用一次，可以在 methods 中直接應用防抖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  methods: &#123;<br>    <span class="hljs-comment">// Lodash 的防抖函式</span><br>    click: _.debounce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// 響應點擊</span><br>    &#125;, <span class="hljs-number">500</span>)<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但是，這種方法對於可複用組件有潛在的問題，因為它們都共享相同的防抖函式。<br>為了使組件實例彼此獨立，可以在生命週期鉤子的 <code>created</code> 裡添加該防抖函式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;save-button&#x27;</span>, &#123;<br>  created() &#123;<br>    <span class="hljs-comment">// Lodash 的防抖函式</span><br>    <span class="hljs-built_in">this</span>.debouncedClick = _.debounce(<span class="hljs-built_in">this</span>.click, <span class="hljs-number">500</span>)<br>  &#125;,<br>  unmounted() &#123;<br>    <span class="hljs-comment">// 移除組件時，取消定時器</span><br>    <span class="hljs-built_in">this</span>.debouncedClick.cancel()<br>  &#125;,<br>  methods: &#123;<br>    click() &#123;<br>      <span class="hljs-comment">// 響應點擊</span><br>    &#125;<br>  &#125;,<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;button @click=&quot;debouncedClick&quot;&gt;</span><br><span class="hljs-string">      保存</span><br><span class="hljs-string">    &lt;/button&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="計算屬性-和-監聽器">計算屬性 和 監聽器</h2><h3 id="計算屬性">計算屬性</h3><p>模板內的表達式非常便利，但是設計它們的初衷是用於簡單運算的。<br>在模板中放入太多的邏輯會讓模板且難以維護。例如，有一個嵌套陣列物件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      author: &#123;<br>        name: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>        books: [<br>          <span class="hljs-string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,<br>          <span class="hljs-string">&#x27;Vue 3 - Basic Guide&#x27;</span>,<br>          <span class="hljs-string">&#x27;Vue 4 - The Mystery&#x27;</span><br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>根據 <code>author</code> 是否已經有一些書來顯示不同的訊息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;computed-basics&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Has published books:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此時，模板不再是簡單的和聲明性的。<br>你必須先看一下它，然後才能意識到它執行的計算取決於 <code>author.books</code>。<br>如果要在模板中多次包含此計算，則問題會變得更糟。</p><p>所以，對於任何包含響應式數據的複雜邏輯，都應該使用計算屬性。</p><h4 id="例子">例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;computed-basics&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Has published books:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      author: &#123;<br>        name: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>        <span class="hljs-comment">// 判斷這裡 books 的數量</span><br>        books: [<br>          <span class="hljs-string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,<br>          <span class="hljs-string">&#x27;Vue 3 - Basic Guide&#x27;</span>,<br>          <span class="hljs-string">&#x27;Vue 4 - The Mystery&#x27;</span><br>        ]<br>      &#125;<br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    <span class="hljs-comment">// 計算屬性的 getter</span><br>    publishedBooksMessage() &#123;<br>      <span class="hljs-comment">// `this` 指向 vm 實例</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.author.books.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#computed-basics&#x27;</span>)<br></code></pre></td></tr></table></figure><p>這裡聲明了一個計算屬性 <code>publishedBooksMessage</code>。</p><p>嘗試更改應用程序 <code>data</code> 中 <code>books</code> 陣列的值，你將看到 <code>publishedBooksMessage</code> 如何相應地更改。</p><p>你可以像普通屬性一樣將數據綁定到模板中的計算屬性。<br>Vue 知道 <code>vm.publishedBookMessage</code> 依賴於 <code>vm.author.books</code> ，因此當 <code>vm.author.books</code> 發生改變時，所有依賴 <code>vm.publishedBookMessage</code> 的綁定也會更新。<br>計算屬性的 getter 函式沒有副作用，它更易於測試和理解。</p><h4 id="計算屬性緩存-vs-方法">計算屬性緩存 vs 方法</h4><p>透過表達式調用方法也可以達到同樣的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; calculateBooksMessage() &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在組件中</span><br>methods: &#123;<br>  calculateBooksMessage() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.author.books.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我們可以將同一函式定義為一個方法而不是一個計算屬性。兩種方式的最終結果確實是完全相同的。<br>然而，不同的是計算屬性是基於它們的反應依賴關係緩存的。計算屬性只在相關響應式依賴發生改變時它們才會重新求值。<br>這就意味著只要 <code>author.books</code> 還沒有發生改變，多次訪問 <code>publishedBookMessage</code> 計算屬性會立即返回之前的計算結果，而不必再次執行函式。</p><p>這也同樣意味著下面的計算屬性將不再更新，因為 <code>Date.now()</code> 不是響應式依賴：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在組件中</span><br>computed: &#123;<br>  now() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比之下，每當觸發重新渲染時，調用方法將總會再次執行函式。</p><p>為什麼需要緩存？假設有一個性能開銷比較大的計算屬性 <code>list</code>，它需要遍歷一個巨大的陣列並做大量的計算。<br>然後我們可能有其他的計算屬性依賴於 <code>list</code>。如果沒有緩存，將不可避免的多次執行 <code>list</code> 的 getter。<br>如果你不希望有緩存，請用 <code>method</code> 來替代。</p><h4 id="計算屬性的-Setter">計算屬性的 Setter</h4><p>計算屬性默認只有 getter，不過在需要的時候也可以設定一個 setter：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>computed: &#123;<br>  fullName: &#123;<br>    <span class="hljs-comment">// getter</span><br>    get() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName<br>    &#125;,<br>    <span class="hljs-comment">// setter</span><br>    set(newValue) &#123;<br>      <span class="hljs-keyword">const</span> names = newValue.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>      <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>]<br>      <span class="hljs-built_in">this</span>.lastName = names[names.length - <span class="hljs-number">1</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>現在使用 <code>vm.fullName = 'John Doe'</code> 時，<br><code>setter</code> 會被調用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也會相應地被更新。</p><h3 id="監聽器">監聽器</h3><p>雖然計算屬性在大多數情況下更合適，但有時也需要一個自定義的監聽器。<br>這就是為什麼 Vue 通過 <code>watch</code> 選項提供了一個更通用的方法，來<code>響應數據的變化</code>。<br><code>當需要在數據變化時執行異步或開銷較大的操作時，這個方式是最有用的。</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;watch-example&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Ask a yes/no question:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> watchExampleVM = Vue.createApp(&#123;</span><br>    data() &#123;<br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        question: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">        answer: <span class="hljs-string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span><br>      &#125;<br>    &#125;,<br>    watch: &#123;<br><span class="javascript">      <span class="hljs-comment">// 當 vm.question 改變時，這個函式都會被調用</span></span><br>      question(newQuestion, oldQuestion) &#123;<br><span class="javascript">        <span class="hljs-keyword">if</span> (newQuestion.indexOf(<span class="hljs-string">&#x27;?&#x27;</span>) &gt; <span class="hljs-number">-1</span>) &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.getAnswer()</span><br>        &#125;<br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      getAnswer() &#123;<br><span class="javascript">        <span class="hljs-built_in">this</span>.answer = <span class="hljs-string">&#x27;Thinking...&#x27;</span></span><br>        axios<br><span class="javascript">          .get(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)</span><br><span class="javascript">          .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.answer = response.data.answer</span><br>          &#125;)<br><span class="javascript">          .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.answer = <span class="hljs-string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span><br>          &#125;)<br>      &#125;<br>    &#125;<br><span class="javascript">  &#125;).mount(<span class="hljs-string">&#x27;#watch-example&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在這個示例中，使用 <code>watch</code> 選項允許我們執行異步操作 (訪問一個 API)，限制我們執行該操作的頻率，並在我們得到最終結果前，設置中間狀態。這些都是計算屬性無法做到的。</p><p>除了 <code>watch</code> 選項之外，你還可以使用命令式的 <code>vm.$watch</code> API。</p><h4 id="計算屬性-vs-監聽器">計算屬性 vs 監聽器</h4><p>Vue 提供了一種更通用的方式來觀察和響應當前活動的實例上的數據變動：監聽屬性。<br>當你有一些數據需要隨著其它數據變動而變動時，你很容易濫用 <code>watch</code>。<br>然而，通常更好的做法是使用計算屬性而不是命令式的 <code>watch</code> 回調。<br>細想一下這個例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>監聽器：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>      lastName: <span class="hljs-string">&#x27;Bar&#x27;</span>,<br>      fullName: <span class="hljs-string">&#x27;Foo Bar&#x27;</span><br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    firstName(val) &#123;<br>      <span class="hljs-built_in">this</span>.fullName = val + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName<br>    &#125;,<br>    lastName(val) &#123;<br>      <span class="hljs-built_in">this</span>.fullName = <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + val<br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#demo&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>計算屬性：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>      lastName: <span class="hljs-string">&#x27;Bar&#x27;</span><br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    fullName() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName<br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#demo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>這個例子中，監聽器 有太多的重復程式碼，使用 計算屬性 比較洽當。</p><h2 id="Class-與-Style-綁定">Class 與 Style 綁定</h2><p>操作元素的 <code>class 列表</code> 和 <code>內聯樣式</code> 是數據綁定的一個常見需求。<br>因為它們都是 attribute，所以我們可以用 <code>v-bind</code>處理它們：只需要通過表達式計算出字符串結果即可。<br>不過，字符串拼接麻煩且易錯。因此，在將 <code>v-bind</code> 用於 <code>class</code> 和 <code>style</code> 時，Vue 做了專門的增強。<br>表達式結果的類型除了字符串之外，還可以是物件或陣列。</p><h3 id="綁定-HTML-Class">綁定 HTML Class</h3><h4 id="物件語法">物件語法</h4><p>可以傳給 <code>:class</code> 一個物件，以動態地切換 <code>class</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的語法表示 <code>active</code> 這個 <code>class</code> 存在與否將取決於數據 property <code>isActive</code> 的 <code>truthiness</code>。</p><blockquote><p>你可以在物件中傳入更多字段來動態切換多個 <code>class</code>。此外，<code>:class</code> 指令也可以與普通的 <code>class</code> attribute 共存。如下模板：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    isActive: <span class="hljs-literal">true</span>,<br>    hasError: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染的結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>當 <code>isActive</code> 或者 <code>hasError</code> 變化時，<code>class</code> 列表將相應地更新。<br>例如，如果 <code>hasError</code> 的值為 <code>true</code>，<code>class</code> 列表將變為 <code>&quot;static active text-danger&quot;</code>。</p><blockquote><p>綁定的數據物件不必內聯定義在模板裡：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    classObject: &#123;<br>      <span class="hljs-comment">// JavaScript 的 物件鍵名 就是字符串，所以可以省略引號。</span><br>      active: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染的結果與上一個案例相同：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>這個案例也可以綁定一個返回物件的計算屬性。這是一個常用且強大的模式：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    isActive: <span class="hljs-literal">true</span>,<br>    error: <span class="hljs-literal">null</span><br>  &#125;<br>&#125;,<br>computed: &#123;<br>  classObject() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      active: <span class="hljs-built_in">this</span>.isActive &amp;&amp; !<span class="hljs-built_in">this</span>.error,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-built_in">this</span>.error &amp;&amp; <span class="hljs-built_in">this</span>.error.type === <span class="hljs-string">&#x27;fatal&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="陣列語法">陣列語法</h4><p>可以把一個陣列傳給 <code>:class</code>，以應用一個 <code>class</code> 列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    activeClass: <span class="hljs-string">&#x27;active&#x27;</span>,<br>    errorClass: <span class="hljs-string">&#x27;text-danger&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染的結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active text-danger&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你想根據條件切換列表中的 <code>class</code>，可以使用三元表達式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這樣寫將始終添加 <code>errorClass</code>，只有在 <code>isActive</code> 為 <code>truthy</code> 時才添加 <code>activeClass</code>。</p><p>不過，當有多個條件 <code>class</code> 時這樣寫有些繁瑣。所以在陣列語法中也可以使用物件語法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="綁定內聯樣式">綁定內聯樣式</h3><h4 id="物件語法-2">物件語法</h4><p><code>:style</code> 的物件語法十分直觀 —— 看著非常像 CSS，但其實是一個 JavaScript 物件。CSS property 名可以用駝峰式 (camelCase) 或短橫線分隔 (kebab-case，記得用引號括起來) 來命名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    activeColor: <span class="hljs-string">&#x27;red&#x27;</span>,<br>    fontSize: <span class="hljs-number">30</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>直接綁定到一個樣式物件通常更好，這會讓模板更清晰：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    styleObject: &#123;<br>      color: <span class="hljs-string">&#x27;red&#x27;</span>,<br>      fontSize: <span class="hljs-string">&#x27;13px&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>同樣的，物件語法常常結合返回物件的計算屬性使用。</p></blockquote><h4 id="陣列語法-2">陣列語法</h4><p><code>:style</code> 的陣列語法可以將多個樣式物件應用到同一個元素上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自動添加前餟">自動添加前餟</h4><p>在 <code>:style</code> 中使用需要 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix">瀏覽器引擎前綴</a> (vendor prefixes) 的 CSS property 時，<br>如 <code>transform</code>，Vue 將自動偵測並添加相應的前綴。</p><h4 id="多重值">多重值</h4><p>可以為 style 綁定中的 property 提供一個包含多個值的陣列，常用於提供多個帶前綴的值，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這樣寫只會渲染陣列中最後一個被瀏覽器支持的值。<br>在上面的例子中，如果瀏覽器支持不帶瀏覽器前綴的 flexbox，那麼就只會渲染 <code>display: flex</code>。</p><h2 id="條件渲染">條件渲染</h2><h3 id="v-if">v-if</h3><p><code>v-if</code> 指令用於條件性地渲染一塊內容。這塊內容只會在指令的表達式返回 <code>truthy</code> 值的時候被渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="template-元素">&lt;template&gt; 元素</h4><p>因為 <code>v-if</code> 是一個指令，所以必須將它添加到一個元素上。但是如果想切換多個元素呢？此時可以把一個 <code>&lt;template&gt;</code> 元素當做不可見的包裹元素，並在上面使用 <code>v-if</code>。<br>最終的渲染結果將不包含 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="v-else">v-else</h4><p>使用 <code>v-else</code> 指令表示 <code>v-if</code> 的 <code>else 塊</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span><br>  Now you see me<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  Now you don&#x27;t<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-else</code> 元素必須緊跟在帶 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的後面，否則它將不會被識別。</p><h4 id="v-else-if">v-else-if</h4><p><code>v-else-if</code>，顧名思義，充當 <code>v-if</code> 的 <code>else-if 塊</code>，並且可以連續使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>  A<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>  B<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>  C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  Not A/B/C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>與 <code>v-else</code> 的用法類似，<code>v-else-if</code> 也必須緊跟在帶 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之後。</p><h3 id="v-show">v-show</h3><p>另一個用於條件性展示元素的選項是 <code>v-show</code> 指令。用法與 <code>v-if</code> 大致一樣：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不同的是帶有 <code>v-show</code> 的元素始終會被渲染並保留在 DOM 中。<code>v-show</code> 只是簡單地切換元素的 CSS property <code>display</code>。</p><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p><h3 id="v-if-vs-v-show">v-if vs v-show</h3><p><code>v-if</code> 是 “真正” 的條件渲染，因為它會確保在切換過程中，條件塊內的事件監聽器和子組件適當地被銷毀和重建。<br><code>v-if</code> 也是惰性的：如果在初始渲染時條件為 <code>false</code>，則什麼也不做 —— 直到條件第一次變為 <code>true</code> 時，才會開始渲染條件塊。</p><p>相比之下，<code>v-show</code> 就簡單得多 —— 不管初始條件是什麼，元素總是會被渲染，並且只是簡單地基於 CSS 進行切換。</p><p>一般來說，<code>v-if</code> 有更高的切換開銷，而 <code>v-show</code> 有更高的初始渲染開銷。</p><blockquote><p>因此，如果需要非常頻繁地切換，使用 <code>v-show</code> 較好；如果在運行時條件很少改變，使用 <code>v-if</code> 較好。</p></blockquote><h2 id="列表渲染">列表渲染</h2><h3 id="v-for-陣列">v-for 陣列</h3><p>可以使用 <code>v-for</code> 指令渲染一個陣列。<br><code>v-for</code> 指令需要使用 <code>item in items</code> 型式的特殊語法，而 <code>item</code> 就是被迭代的陣列元素<code>別名</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;array-rendering&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;</span><br>    &#123;&#123; item.message &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      items: [&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;]<br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#array-rendering&#x27;</span>)<br></code></pre></td></tr></table></figure><p>輸出結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;array-rendering&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Foo<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Bar<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在 <code>v-for</code> 塊中，可以訪問所有父作用域的 property。<br><code>v-for</code> 還支援一個可選的第二個參數，即當前項的索引值。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;array-with-index&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span><br>    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>輸出結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;array-with-index&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Parent - 0 - Foo<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Parent - 1 - Bar<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>也可以使用 <code>of</code> 代替 <code>in</code> 作為分隔符，因為他更接近 JavaScript 迭代器的語法：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item of items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-for-物件">v-for 物件</h3><p><code>v-for</code> 也可以用來遍歷一個物件 property。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-for-object&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in myObject&quot;</span>&gt;</span><br>    &#123;&#123; value &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      myObject: &#123;<br>        title: <span class="hljs-string">&#x27;How to do lists in Vue&#x27;</span>,<br>        author: <span class="hljs-string">&#x27;Jane Doe&#x27;</span>,<br>        publishedAt: <span class="hljs-string">&#x27;2016-04-10&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#v-for-object&#x27;</span>)<br></code></pre></td></tr></table></figure><p>輸出結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-for-object&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>How to do list in Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Jane Doe<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2016-04-10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>也可以提供第二個參數作為 property 名稱（鍵名 key）：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name) in myObject&quot;</span>&gt;</span><br>  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>輸出結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-for-object&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>title: How to do list in Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>author: Jane Doe<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>publishedAt: 2016-04-10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>還可以提供第三個參數作為索引值：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in myObject&quot;</span>&gt;</span><br>  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>輸出結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-for-object&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>0. title: How to do list in Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1. author: Jane Doe<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2. publishedAt: 2016-04-10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在遍歷物件時，會按 <code>Object.keys()</code> 的結果遍歷，但是不能保證它在不同 JavaScript 引擎下的結果都一致。</p></blockquote><h3 id="維護狀態">維護狀態</h3><p>當 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表時，它默認使用 “就地更新” 的策略。<br>如果數據項的順序被改變，Vue 將不會移動 DOM 元素來匹配數據項的順序，而是就地更新每個元素，並且確保它們在每個索引位置正確渲染。</p><p>這個默認的模式是高效的，但是<code>只適用於不依賴子組件狀態或臨時 DOM 狀態 (例如：表單輸入值) 的列表渲染輸出</code>。</p><p>為了給 Vue 一個提示，以便它能跟踪每個節點的身份，從而重用和重新排序現有元素，你需要為每項提供一個唯一 <code>key</code> attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- content --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>建議盡可能在使用 <code>v-for</code> 時提供 <code>key</code> attribute，除非遍歷輸出的 DOM 內容非常簡單，或者是刻意依賴默認行為（就地更新）以獲取性能上的提升。</p><p>因為它是 Vue 識別節點的一個通用機制，<code>key</code> 並不僅與 <code>v-for</code> 特別關聯。</p><blockquote><p>不要使用物件或陣列之類的非基本類型值作為 <code>v-for</code> 的 <code>key</code>。請用字符串或數值類型的值。</p></blockquote><h3 id="陣列更新檢測">陣列更新檢測</h3><h4 id="變更方法">變更方法</h4><p>Vue 將被監聽的陣列的變更方法進行了包裹，所以它們也將會觸發視圖更新。這些被包裹過的方法包括：</p><ul><li>push()</li><li>pop()</li><li>shitft()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h4 id="替換陣列">替換陣列</h4><p>變更方法，顧名思義，會變更調用了這些方法的原始陣列。<br>相比之下，也有非變更方法，例如 <code>filter()</code>, <code>concat()</code> 和 <code>slice()</code>，<br>它們不會變更原始陣列，而總是返回一個新陣列。</p><p>當使用非變更方法時，可以用新陣列替換舊陣列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">example1.items = example1.items.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.message.match(<span class="hljs-regexp">/Foo/</span>))<br></code></pre></td></tr></table></figure><p>你可能認為這將導致 Vue 丟棄現有 DOM 並重新渲染整個列表。幸運的是，事實並非如此。<br>Vue 為了使得 DOM 元素得到最大範圍的重用而實現了一些智能的啟發式方法，所以用一個含有相同元素的陣列去替換原來的陣列是非常高效的操作。</p><h4 id="顯示過濾-排序後的結果">顯示過濾 / 排序後的結果</h4><p>有時，我們想要顯示一個陣列經過過濾或排序後的版本，而不實際變更或重置原始數據。<br>在這種情況下，可以創建一個計算屬性，來返回過濾或排序後的陣列。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in evenNumbers&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    numbers: [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br>  &#125;<br>&#125;,<br>computed: &#123;<br>  evenNumbers() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.numbers.filter(<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> number % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在計算屬性不適用的情況下 (例如，在嵌套 <code>v-for</code> 循環中) 你可以使用一個方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;numbers in sets&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in even(numbers)&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    sets: [[ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]]<br>  &#125;<br>&#125;,<br>methods: &#123;<br>  even(numbers) &#123;<br>    <span class="hljs-keyword">return</span> numbers.filter(<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> number % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在-v-for-裡使用值的範圍">在 v-for 裡使用值的範圍</h4><p>v-for 也可以接受整數。在這種情況下，它會把模板重複對應次數。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;range&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in 10&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>輸出結果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;range&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="在-template-中使用-v-for">在 &lt;template&gt; 中使用 v-for</h4><p>類似於 <code>v-if</code>，也可以利用帶有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 來循環渲染一段包含多個元素的內容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.msg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="v-for-與-v-if-一同使用">v-for 與 v-if 一同使用</h4><blockquote><p>不推薦在同一元素上使用 <code>v-if</code> 和 <code>v-for</code>。</p></blockquote><p>當它們處於同一節點，<code>v-if</code> 的優先級比 <code>v-for</code> 更高，這意味著 <code>v-if</code> 將沒有權限訪問 <code>v-for</code> 裡的變量：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 這裡將引發錯誤，因為 todo 不存在 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span><br>  &#123;&#123; todo.name &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以把 <code>v-for</code> 移動到 &lt;template&gt; 標籤中來解決：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todo.name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span><br>    &#123;&#123; todo.name &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件處理">事件處理</h2><p>可以使用 <code>v-on</code>（簡寫：<code>@</code>）指令來監聽 DOM 事件，並在觸發事件時執行一些 JavaScript。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-event&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>加一<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>上面的按鈕已被點擊 &#123;&#123; counter &#125;&#125; 次。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      counter: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#basic-event&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="事件處理方法">事件處理方法</h3><p>有許多事件處理邏輯會更加複雜，因此 <code>v-on</code> 還可以接收一個需要調用的方法名稱：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;event-with-method&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- `greet` 是下方定義的方法 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;greet&quot;</span>&gt;</span>Greet<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      name: <span class="hljs-string">&#x27;Vue.js&#x27;</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    greet(event) &#123;<br>      <span class="hljs-comment">// `methods` 內部的 `this` 指向活動實例</span><br>      alert(<span class="hljs-string">&#x27;Hello &#x27;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;!&#x27;</span>)<br>      <span class="hljs-comment">// `event` 是原生 DOM event</span><br>      <span class="hljs-keyword">if</span> (event) &#123;<br>        alert(event.target.tagName)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#event-with-method&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="內聯處理器中的方法">內聯處理器中的方法</h3><p>除了直接綁定方法，也可以在內聯 JavaScript 語句中調用方法（無需柯里化）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inline-handler&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;<br>  methods: &#123;<br>    say(message) &#123;<br>      alert(message)<br>    &#125;<br>  &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#inline-handler&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有時也需要訪問原始的 DOM 事件，可以使用特殊變量 <code>$event</code>傳入方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;warn(&#x27;此表單還無法提交。&#x27;, $event)&quot;</span>&gt;</span><br>  提交<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>methods: &#123;<br>  warn(message, event) &#123;<br>    <span class="hljs-comment">// 這個 event 是 $event 特殊變量 = DOM 事件</span><br>    <span class="hljs-keyword">if</span> (event) &#123;<br>      event.preventDefault()<br>    &#125;<br>    alert(message)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>整理所有情況：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handelClick&quot;</span>&gt;</span>不調用<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handelClick()&quot;</span>&gt;</span>調用沒傳參<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handelClick(&#x27;哈囉&#x27;)&quot;</span>&gt;</span>調用傳參<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handelClick(&#x27;Nyahello&#x27;, $event)&quot;</span>&gt;</span>調用傳參和 DOM 事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>methods: &#123;<br>  handelClick(msg = <span class="hljs-string">&#x27;無值&#x27;</span>, event = <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(msg, event)<br>  &#125;,<br></code></pre></td></tr></table></figure><p>按照順序輸出結果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">=&gt; MouseEvent <span class="hljs-literal">null</span><br>=&gt; <span class="hljs-string">&#x27;無值&#x27;</span> <span class="hljs-literal">null</span><br>=&gt; <span class="hljs-string">&#x27;哈囉&#x27;</span> <span class="hljs-literal">null</span><br>=&gt; <span class="hljs-string">&#x27;Nyahello&#x27;</span> MouseEvent<br></code></pre></td></tr></table></figure><h3 id="多事件處理器">多事件處理器</h3><p>事件處理程序中可以有多個方法，這些方法由逗號運算符分隔：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 這兩個 one() 和 two() 將執行按鈕點擊事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;one($event), two($event)&quot;</span>&gt;</span><br>  發送<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>methods: &#123;<br>  one(event) &#123;<br>    <span class="hljs-comment">// 第一個事件處理邏輯...</span><br>  &#125;,<br>  two(event) &#123;<br>   <span class="hljs-comment">// 第二個事件處理邏輯...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事件修飾符">事件修飾符</h3><p>在事件方法中調用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常見的需求。<br>儘管可以在方法中輕鬆實現這點，但更好的方式是：方法只有純粹的數據邏輯，而不是去處理 DOM 事件細節。</p><p>為了解決這個問題，Vue 為 <code>v-on</code> 提供了事件修飾符。修飾符是由點開頭的指令後綴來表示的。</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止單擊事件繼續傳播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 提交事件不再重載頁面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 修飾符可以串聯 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只有修飾符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 添加事件監聽器時使用事件捕獲模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即內部元素觸發的事件先在此處理，然後才交由內部元素進行處理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只當在 event.target 是當前元素自身時觸發處理函式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即事件不是從內部元素觸發的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用修飾符時，順序很重要；相應的程式碼會以同樣的順序產生。因此，用 <code>@:click.prevent.self</code> 會阻止所有的點擊，而 <code>@:click.self.prevent</code> 只會阻止對元素自身的點擊。</p></blockquote><h3 id="按鍵修飾符">按鍵修飾符</h3><p>在監聽鍵盤事件時，經常需要檢查詳細的按鍵。Vue 允許為 <code>v-on</code> 或者 <code>@</code> 在監聽鍵盤事件時添加按鍵修飾符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 只有在 `key` 是 `Enter` 時調用 `vm.submit()` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>可以將任意有效按鍵名轉換為 kebab-case 來作為修飾符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.page-down</span>=<span class="hljs-string">&quot;onPageDown&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>只會在 <code>$event.key</code> 等於 <code>PageDown</code> 時被調用。</p><h4 id="按鍵別名">按鍵別名</h4><p>Vue 為最常用的鍵提供了別名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕獲 “刪除” 和 “退格” 鍵)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><h3 id="系統修飾鍵">系統修飾鍵</h3><p>可以用如下修飾符來實現僅在 <code>按下相應按鍵時</code> 才觸發滑鼠或鍵盤事件的監聽器。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><blockquote><p>meta 在 Mac 系統鍵盤上， 對應 command 鍵 (⌘)。在 Windows 系統上對應 Windows 鍵 (⊞)。</p></blockquote><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Alt + Enter --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.alt.enter</span>=<span class="hljs-string">&quot;clear&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- Ctrl + Click --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.ctrl</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>修飾鍵與常規按鍵不同，<code>在和 keyup 事件一起用時，事件觸發時修飾鍵必須處於按下狀態</code>。<br>換句話說，只有在按住 ctrl 的情況下釋放其它按鍵，才能觸發 keyup.ctrl。<br>而單單釋放 ctrl 也不會觸發事件。</p></blockquote><h4 id="exact-修飾符">.exact 修飾符</h4><p><code>.exact</code> 修飾符允許你控制由精確的系統修飾符組合觸發的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 即使 Alt 或 Shift 被一同按下時也會觸發 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.ctrl</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有且只有 Ctrl 被按下的時候才觸發 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.ctrl.exact</span>=<span class="hljs-string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 沒有任何系統修飾符被按下的時候才觸發 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.exact</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="滑鼠按鍵修飾符">滑鼠按鍵修飾符</h4><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>這些修飾符會限制處理函式僅響應特定的滑鼠按鍵。</p><h4 id="為什麼在-HTML-中監聽事件？">為什麼在 HTML 中監聽事件？</h4><p>Vue 這種事件監聽的方式違背了 關注點分離 (separation of concern) 這個長期以來的優良傳統。<br>但不必擔心，因為所有的 Vue 事件處理方法和表達式都嚴格綁定在當前視圖的 ViewModel 上，它不會導致任何維護上的困難。實際上，使用 <code>v-on</code> 或 <code>@</code> 有幾個好處：</p><ol><li><p>掃一眼 HTML 模板便能輕鬆定位在 JavaScript 裡對應的方法。</p></li><li><p>因為你無須在 JavaScript 裡手動綁定事件，你的 ViewModel 程式碼可以是非常純粹的邏輯，和 DOM 完全分開，更易於測試。</p></li><li><p>當一個 ViewModel 被銷毀時，所有的事件處理器都會自動被刪除。你無須擔心如何清理它們。</p></li></ol><h2 id="表單輸入綁定">表單輸入綁定</h2><h3 id="基礎用法">基礎用法</h3><p>你可以用 <code>v-model</code> 指令在表單 <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上創建雙向數據綁定。<br>它會根據控件類型自動選取正確的方法來更新元素。<code>v-model</code> 本質上只不過是語法糖。<br>它負責監聽用戶的輸入事件來更新數據，並在某種極端場景下進行一些特殊處理。</p><blockquote><p><code>v-model</code> 會忽略所有表單元素的 value、checked、selectedattribute 的初始值而總是將當前活動實例的數據作為數據來源。你應該通過 JavaScript 在組件的 data 選項中聲明初始值。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputValue&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>輸入內容：&#123;&#123; inputValue &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    inputValue: <span class="hljs-string">&#x27;初始值&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>v-model</code> 在內部為不同的輸入元素使用不同的 property 並拋出不同的事件：</p><ul><li><code>text</code> 和 <code>textarea</code> 元素使用 <code>value</code> property 和 <code>input</code> 事件</li><li><code>checkbox</code> 和 <code>radio</code> 使用 <code>checked</code> property 和 <code>change</code> 事件</li><li><code>select</code> 字段將 <code>value</code> 作為 prop 並將 <code>change</code> 作為事件</li></ul><blockquote><p>對於需要使用輸入法組織文字過程中得到更新，<br>應該要使用 <code>v-on</code> 與 <code>input</code> 事件綁定，而不是 <code>v-model</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;handelInput&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>輸入內容：&#123;&#123; inputValue &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    inputValue: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>&#125;,<br>methods: &#123;<br>  handelInput(event) &#123;<br>    <span class="hljs-built_in">this</span>.inputValue = event.target.value<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="文本（Text）">文本（Text）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;編輯我&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>雙向綁定：&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    msg: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多行文本（Textarea）">多行文本（Textarea）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;編輯我&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-comment">&lt;!-- white-space: pre-line; 支援換行符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;</span>雙向綁定：&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    msg: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="複選框（Checkbox）">複選框（Checkbox）</h4><p>單個複選框，綁定布林值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>checkbox: &#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    chekced: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多個複選框，綁定 <code>value</code> 至陣列：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pekora&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Pekroa&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkArray&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sakuraMiko&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SakuraMiko&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkArray&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    checkArray: [],<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="單選框（Radio）">單選框（Radio）</h4><p>綁定單選框的 <code>value</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;first&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;第一個&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span> 第一個<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;second&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;第二個&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span> 第二個<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    picked: <span class="hljs-string">&#x27;第一個&#x27;</span> <span class="hljs-comment">// 初始值</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="選擇框（Select）">選擇框（Select）</h4><blockquote><p>綁定單個 select 裡的 option 的 <code>value</code>：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>請選擇其中一個<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C&quot;</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>已選擇: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    selected: <span class="hljs-string">&#x27;none&#x27;</span> <span class="hljs-comment">// 初始值</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>綁定多個 select 裡的 option 的 <code>value</code>：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C&quot;</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>已選擇: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    selected: [],<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="值綁定">值綁定</h3><!-- TODO --><h3 id="修飾符-2">修飾符</h3><h4 id="lazy">.lazy</h4><p>默認 <code>v-model</code> 在每次 <code>input</code> 事件後將輸入框的值與數據進行同步，<br>若添加了 <code>.lazy</code> 修飾符，而改為在 <code>change</code> 事件之後進行同步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在 change 時同步 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="number">.number</h4><p>HTML 輸入元素的值總是返回字符串，<br>如果想自動將用戶的輸入值轉為數值類型，可以添加 <code>.number</code> 修飾符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>如果這個值無法被 <code>parseFloat</code> 解析，則會返回原始值。</p><h4 id="trim">.trim</h4><p>這個修飾符和 <code>String.prototype.trim()</code> 的作用一樣，<br>可以將字符串首尾的空格移除。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="組件基礎">組件基礎</h2><h3 id="基本">基本</h3><p>這是一個 <code>註冊全局組件</code> 的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br><span class="hljs-comment">// 定義一個名為 button-counter 的新全局組件</span><br>app.component(<span class="hljs-string">&#x27;button-counter&#x27;</span>, &#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      count: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;button @click=&quot;count++&quot;&gt;</span><br><span class="hljs-string">      You clicked me &#123;&#123; count &#125;&#125; times.</span><br><span class="hljs-string">    &lt;/button&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>組件是帶有名稱的可複用實例，可以把這個組件作為一個根實例中的自定義元素來使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.mount(<span class="hljs-string">&#x27;#components-demo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>因為組件是可複用的組件實例，所以它們與根實例接收相同的選項，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命週期鉤子等。</p><h3 id="組件複用">組件複用</h3><p>組件可以進行任意次數的複用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>當點擊按鈕時，每個組件都會各自獨立維護它的 <code>count</code>。<br>因為每用一次組件，就會有一個它的新實例被創建。</p><h3 id="組件的組織">組件的組織</h3><p>通常一個應用會以一棵嵌套的組件樹的形式來組織：</p><p><img src="/posts/677b/components.png" alt="Vue3生命週期圖"></p><p>例如，你可能會有頁頭、側邊欄、內容區等組件，每個組件又包含了其它的像導航鏈接、博文之類的組件。</p><p>為了能在模板中使用，這些組件必須先註冊以便 Vue 能夠識別。<br>有兩種組件的註冊類型：全局註冊和局部註冊。<br>至此，我們的組件都只是通過 <code>component</code> 方法全局註冊的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br>app.component(<span class="hljs-string">&#x27;my-component-name&#x27;</span>, &#123;<br>  <span class="hljs-comment">// ... 選項 ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>全局註冊的組件可以在應用中的任何組件的模板中使用。</p></blockquote><h3 id="透過-Prop-向子組件傳遞數據">透過 Prop 向子組件傳遞數據</h3><p>在很多情況下會需要向子組件傳遞數據，比如：子組件是一個文章組件，<br>該組件有標題、簡介、預覽圖，這些數據是不能寫死的，<br>這時就需要傳遞數據，這就是 prop 的用處。</p><p>Prop 可以讓你在組件上註冊一些自定義 attribute。<br>為了給文章組件傳遞一個標題，可以用 <code>props</code> 選項將其包含在該組件可接受的 prop 陣列中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br>app.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  <span class="hljs-comment">// 此子組件可以傳遞 title 這個自定義的 attribute</span><br>  props: [<span class="hljs-string">&#x27;title&#x27;</span>],<br>  <span class="hljs-comment">// 該值可以直接在模板中訪問</span><br>  template: <span class="hljs-string">`&lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;`</span><br>&#125;)<br><br>app.mount(<span class="hljs-string">&#x27;#blog-post-demo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>當一個值被傳遞給一個 prop attribute 時，它就成為該組件實例中的一個 property。<br>該 property 的值可以在模板中訪問，就像任何其他組件 property 一樣。</p><p>一個組件默認可以擁有任意數量的 prop，無論任何值都可以傳遞給 prop。</p><p>在一個典型的應用中，你可能在 data 裡有一個文章的陣列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> App = &#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      posts: [<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;My journey with Vue&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blogging with Vue&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Why Vue is so fun&#x27;</span> &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> app = Vue.createApp(App)<br><br>app.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  props: [<span class="hljs-string">&#x27;title&#x27;</span>],<br>  template: <span class="hljs-string">`&lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;`</span><br>&#125;)<br><br>app.mount(<span class="hljs-string">&#x27;#blog-posts-demo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>為每篇文章渲染標題：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blog-posts-demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;post.id&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;post.title&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="監聽子組件事件">監聽子組件事件</h3><p>在某些情況下會需要子組件與父級組件溝通。</p><p>例如在剛剛的案例引入 調整文章標題字體大小 的輔助功能。</p><p>首先，在父級組件添加一個 <code>postFontSize</code> 數據 property：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> App = &#123;<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      posts: [<br>        <span class="hljs-comment">/* ... */</span><br>      ],<br>      postFontSize: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>並在模板中使用該數據：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blog-posts-demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;post.id&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;post.title&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接著到子組件添加一個按鈕：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  props: [<span class="hljs-string">&#x27;title&#x27;</span>],<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div class=&quot;blog-post&quot;&gt;</span><br><span class="hljs-string">      &lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;</span><br><span class="hljs-string">      &lt;button&gt;</span><br><span class="hljs-string">        放大文字</span><br><span class="hljs-string">      &lt;/button&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>外觀有了，但目前這個按鈕是沒有任何作用的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><br>  放大文字<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以先分析這個按鈕需要做到什麼事：<br>（必須要分清楚是哪個組件做哪些事）</p><ol><li>點擊事件（子組件）</li><li>事件邏輯（父組件）</li></ol><p>所以子組件的模板按鈕大概可這樣寫</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>  放大文字<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>問題是，要怎麼在父組件監聽子組件的事件呢（怎麼知道子組件觸發了事件）？</p><p>組件實例提供了自定義事件的系統來解決這個問題。<br>父級組件可以像處理原生 DOM 事件一樣通過 <code>v-on</code> 或 <code>@</code> 監聽子組件實例的任意事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">  <span class="hljs-attr">...</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">enlarge-text</span>=<span class="hljs-string">&quot;postFontSize += 0.1&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同時，子組件可以透過內建的 <code>$emit</code> 方法傳入事件名來<code>觸發一個事件</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span><br>  放大文字<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>整理以上的 <code>$emit</code>，流程會變成這樣：</p><ol><li>點擊事件，並觸發父組件的自定義事件（子組件）</li><li>監聽自定義事件，並處理邏輯（父組件）</li></ol><p>可以在 <code>emits</code> 選項列出已拋出的事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  props: [<span class="hljs-string">&#x27;title&#x27;</span>],<br>  emits: [<span class="hljs-string">&#x27;enlargeText&#x27;</span>],<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>這可以更方便的了解組件拋出的所有事件，還可選擇驗證它們。</p><h4 id="拋出一個值">拋出一個值</h4><p>可以使用 <code>$emit</code> 方法的第二個參數來拋出值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;enlarge-text&#x27;, 0.1)&quot;</span>&gt;</span><br>  放大文字<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以在父組件使用 <code>$event</code> 訪問拋出的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">  <span class="hljs-attr">...</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">enlarge-text</span>=<span class="hljs-string">&quot;postFontSize += $event&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果事件處理是個方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">  <span class="hljs-attr">...</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">enlarge-text</span>=<span class="hljs-string">&quot;onEnlargeText&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>該值會做為方法的第一個值傳入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  onEnlargeText(enlargeAmount) &#123;<br>    <span class="hljs-built_in">this</span>.postFontSize += enlargeAmount<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="支援組件-v-model">支援組件 v-model</h4><p>定義事件也可以用於創建支持 <code>v-model</code> 的 <code>自定義輸入組件</code>。</p><blockquote><p>記住以下邏輯</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchText&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 等同於 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;searchText&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;searchText = $event.target.value&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在組件上時：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchText&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 等同於 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:model-value</span>=<span class="hljs-string">&quot;searchText&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">update:model-value</span>=<span class="hljs-string">&quot;searchText = $event&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以發現組件用 <code>model-value</code> prop 傳遞了 <code>searchText</code> property，<br>並監聽了自定義事件 <code>update:model-value</code>，處理邏輯也使用到了 <code>$event</code>。</p><p>所以在組件在使用 v-model 必須滿足以下條件才能正常使用。</p><ul><li>將 <code>value</code> attribute 綁定到一個名為 <code>model-value</code> 的 prop。</li><li>在 <code>input</code> 事件觸發時，使用 <code>$emit</code> 觸發 <code>update:model-value</code> 自定義事件，並拋出值。</li></ul><p>實現後大概長這個樣子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;custom-input&#x27;</span>, &#123;<br>  props: [<span class="hljs-string">&#x27;modelValue&#x27;</span>],<br>  emits: [<span class="hljs-string">&#x27;update:modelValue&#x27;</span>],<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;input</span><br><span class="hljs-string">      :value=&quot;modelValue&quot;</span><br><span class="hljs-string">      @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span><br><span class="hljs-string">    /&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>現在 <code>v-model</code> 就可以正長使用了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchText&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在該組件中實現 <code>v-model</code> 的另一種方法是使用 <code>computed</code> property 的功能來定義 <code>getter</code> 和 <code>setter</code>。<br>get 方法應返回 <code>model-value</code> property，set 方法應該觸發相應的事件。</p><p>因為：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 等同於 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;value&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;value = $event.target.value&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>所以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;custom-input&#x27;</span>, &#123;<br>  props: [<span class="hljs-string">&#x27;modelValue&#x27;</span>],<br>  emits: [<span class="hljs-string">&#x27;update:modelValue&#x27;</span>],<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;input v-model=&quot;value&quot;&gt;</span><br><span class="hljs-string">  `</span>,<br>  computed: &#123;<br>    <span class="hljs-comment">// 注意這個計算屬性的名稱</span><br>    value: &#123;<br>      get() &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * :value=&quot;value&quot;</span><br><span class="hljs-comment">         *    綁定的 value 會從 modelValue prop 取值。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.modelValue<br>      &#125;,<br>      set(value) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@input</span>=&quot;value = $event.target.value&quot;</span><br><span class="hljs-comment">         *    當 value = $event.target.value 時，</span><br><span class="hljs-comment">         *    新的 value 會成為這個 setter 的 參數（value），</span><br><span class="hljs-comment">         *    接著調用內置方法 this.$emit() 觸發自定義事件和值。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, value)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="插槽分發內容">插槽分發內容</h3><p>和 HTML 元素一樣，我們經常需要向一個組件傳遞內容，像這樣：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span><br>  好像發生了什麼意外。<br><span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以透過 Vue 自定義的 <code>&lt;slot&gt;</code> 元素來實現：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;alert-box&#x27;</span>, &#123;<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div class=&quot;demo-alert-box&quot;&gt;</span><br><span class="hljs-string">      &lt;strong&gt;錯誤！&lt;/strong&gt;</span><br><span class="hljs-string">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>輸出得結果長這樣：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-alert-box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>錯誤！<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>  好像發生了什麼意外。<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>總結 <code>&lt;slot&gt;</code> 大致上就是做為內容佔位符。</p><h3 id="動態組件">動態組件</h3><p>有的時候，在不同組件之間進行動態切換是非常有用的，比如在一個多標籤的界面裡。</p><p>上述內容可以通過 Vue 的 <code>&lt;component&gt;</code> 元素加一個特殊的 <code>is</code> attribute 來實現：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 此組件會在 `currentTabComponent` 改變時改變 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>currentTabComponent</code> 可以包括：</p><ul><li>已註冊組件的名字（ <a href="https://codepen.io/team/Vue/pen/oNXaoKy">案例</a> ）</li><li>一個組件的選項物件（ <a href="https://codepen.io/team/Vue/pen/oNXapXM">案例</a> ）</li></ul><h3 id="解析-DOM-模板的注意事項">解析 DOM 模板的注意事項</h3><p>有些 HTML 元素，例如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，對於哪些元素可以出現在其內部是有嚴格限制的。<br>而有些元素，例如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出現在其它某些特定的元素內部。</p><p>這會導致我們使用這些有約束條件的元素時遇到一些問題。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blog-post-row</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post-row</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這個自定義組件 <code>&lt;blog-post-row&gt;</code> 會被作為無效的內容提升到外部，並導致最終渲染結果出錯。我們可以使用特殊的 <code>v-is</code> 指令作為一個變通的辦法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&quot;&#x27;blog-post-row&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>v-is</code> 值應為 JavaScript 字符串：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 錯誤的，這樣不會渲染任何東西 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&quot;blog-post-row&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 正確的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&quot;&#x27;blog-post-row&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外，HTML attribute 名不區分大小寫，因此瀏覽器將所有大寫字符解釋為小寫。<br>這意味著當你在 DOM 模板中使用時，駝峰 prop 名稱和 event 處理器參數需要使用它們的 kebab-cased (橫線字符分隔) 等效值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  在 JavaScript 中的駝峰</span><br><br>app.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  props: [<span class="hljs-string">&#x27;postTitle&#x27;</span>],<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;/h3&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在 HTML 則是橫線字符分割 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">post-title</span>=<span class="hljs-string">&quot;hello!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是如果從以下來源使用模板的話，這條限制是不存在的：</p><ul><li>字符串模板 (例如：template: ‘…’)</li><li>單文件組件</li><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li></ul><h3 id="在組件上使用-class-綁定">在組件上使用 class 綁定</h3><p>在現有單個根元素的自定義組件上使用 <code>class</code> attribute 時，這些 class 將被添加到該元素中。<br>此元素上現有的 class 將不會被覆蓋：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br>app.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  template: <span class="hljs-string">`&lt;p class=&quot;foo bar&quot;&gt;Hi!&lt;/p&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;baz boo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>渲染結果為：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>帶數據綁定 class 也適用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure><p>當　<code>isActive</code> 為 truthy 時，渲染結果為：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foo bar active&quot;</span>&gt;</span>Hi<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果該組件有多個根元素，需要定義哪些部分接收這個 class。<br>可以使用 <code>$attr</code> 組件屬性執行此操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;baz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br>app.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;p :class=&quot;$attrs.class&quot;&gt;Hi!&lt;/p&gt;</span><br><span class="hljs-string">    &lt;span&gt;This is a child component&lt;/span&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="在組件上使用-v-for">在組件上使用 v-for</h3><p>在自定義組件上，可以像在任何普通元素上一樣使用 <code>v-for</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure><p>任何數據都不會被自動傳遞到組件裡，因為組件有自己獨立的作用域。<br>為了把迭代數據傳遞到組件裡，需要使用 props：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:item</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不自動將 <code>item</code> 注入到組件裡的原因是，這會使得組件與 <code>v-for</code> 的運作緊密耦合。<br>明確組件數據的來源能夠使組件在其他場合重複使用。</p><p><a href="https://codepen.io/team/Vue/pen/abOaWpz">todo 列表案例</a></p><hr><p>封面來源 ：</p><ul><li><a href="https://www.pixiv.net/artworks/87658338">yenkoes - にゃんるし</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 網頁前端 </category>
          
          <category> 重新認識 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新認識 CSS</title>
      <link href="posts/8933/"/>
      <url>posts/8933/</url>
      
        <content type="html"><![CDATA[<h2 id="簡介">簡介</h2><h3 id="HTML-的侷限性">HTML 的侷限性</h3><p>HTML 只關注內容的語意，比如 <code>&lt;img&gt;</code> 表示這裡有一張圖片。</p><p>雖然 HTML 自帶一些簡單的樣式，但該樣式並不是我們理想的樣子。</p><h3 id="CSS">CSS</h3><p>CSS（<ins>C</ins>ascading <ins>S</ins>tyle <ins>S</ins>heets）是 階層樣式表 的簡稱，又稱 疊層樣式表，再簡化一點可以直稱 樣式表。</p><p>CSS 也是一種標記語言。（和 HTML 一樣）</p><p>CSS 主要用於調整 HTML 的文字（字體、大小、對齊、顏色、…）、圖片（寬高、邊框、邊距、…）以及版面佈局和外觀顯示樣式。</p><p>總結：</p><ul><li>HTML 主要處理結構</li><li>CSS 可以美化 HTML 和佈局</li><li>CSS 可以令 結構（HTML）與 樣式（CSS）相分離</li></ul><h2 id="語法規範">語法規範</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 註釋 */</span><br>... &#123;<br>  屬性: 參數;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引入">引入</h2><h3 id="行內-內聯-樣式表">行內 / 內聯 樣式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="內部樣式表">內部樣式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外部樣式表">外部樣式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;外部樣式表位置&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="選擇器">選擇器</h2><p>選擇器的主要用途是選取到正確的 HTML 元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">選擇器 &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E5%9F%BA%E6%9C%AC%E9%80%89%E6%8B%A9%E5%99%A8">MDN - 選擇器</a></li></ul><h3 id="基本選擇器">基本選擇器</h3><h4 id="通用選擇器">通用選擇器</h4><p>選取所有元素。</p><p>語法： <code>*</code><br>範例：選取所有元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="標籤選擇器">標籤選擇器</h4><p>選擇所有符合的指定標籤的元素。</p><p>語法：<code>標籤名稱</code> (element-name)<br>範例：選取所有 <code>h1</code> 元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="類別選擇器">類別選擇器</h4><p>選擇所有符合的指定 class 屬性值的元素。</p><p>語法：<code>.類別名稱</code> (.class-name)<br>範例：選取所有含有 <code>index</code> 屬性值的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.index</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ID-選擇器">ID 選擇器</h4><p>選擇符合的指定 id 屬性值的元素。</p><p>語法：<code>#ID名稱</code> (#id-name)<br>範例：選取函有 <code>nav</code> 屬性值的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#nav</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="屬性選擇器">屬性選擇器</h4><p>選擇所有符合指定屬性的元素。</p><p>語法：</p><ul><li><code>[屬性]</code>（[attr]，選取擁有該屬性的元素，無論值為何）</li><li><code>[屬性=值]</code>（[attr=value]，選取擁有該屬性和值的元素）</li><li><code>[屬性^=值]</code> ([attr^=value]，選取擁有該屬性和以值開頭的元素)</li><li><code>[屬性$=值]</code> ([attr$=value]，選取擁有該屬性和以值結尾的元素)</li></ul><p>範例：選取 含有 class 屬性，並值為 index 開頭的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[class^=<span class="hljs-string">&#x27;index&#x27;</span>]</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分組選擇器">分組選擇器</h3><h4 id="選擇器列表">選擇器列表</h4><p>可以把多個選擇器寫在一起共用同一個樣式。</p><p>語法：<code>A, B, ...</code><br>範例：同時使用多種選擇器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>,<br><span class="hljs-selector-class">.index</span>,<br><span class="hljs-selector-id">#content</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="組合選擇器">組合選擇器</h3><h4 id="後代選擇器">後代選擇器</h4><p>選取某個元素的後代元素。</p><p>語法：<code>A B</code>（空格）<br>範例：選取 <code>.list</code> 的所有後代 <code>img</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">img</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="子代選擇器">子代選擇器</h4><p>選取某個元素的子代元素（子元素）。</p><p>語法：<code>A&gt;B</code>（ B 元素不可以在 A 的其他元素裡）<br>範例：選取 <code>.list</code> 的所有子代元素 <code>.item</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.list</span> &gt; <span class="hljs-selector-class">.item</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="偽選擇器">偽選擇器</h3><h4 id="偽類選擇器">偽類選擇器</h4><p>根據狀況或狀態來選擇元素。（比如：已訪問的連結、一組元素的第 n 個）</p><p>語法：<code>:</code>（以單個冒號開頭）<br>範例：當游標移動至超連結元素上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.link</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="偽元素選擇器">偽元素選擇器</h4><p>在 CSS 中以選擇器在某個元素新增元素。</p><p>語法：<code>::</code>（以雙個冒號開頭）<br>範例：在 li 標籤前添加元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">/* 偽元素必需寫此屬性（內容） */</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基本樣式">基本樣式</h2><h3 id="字體">字體</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family">MDN - font-family - 字體家族</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size">MDN - font-size - 字體大小</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight">MDN - font-weight - 字體粗度</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style">MDN - font-style - 字體風格（斜體、傾斜體）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font">MDN - font - 簡寫</a></li></ul><h3 id="文字">文字</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/color">MDN - color - 顏色</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-height">MDN - line-height - 行間距</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align">MDN - text-align - 水平對齊方式</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration">MDN - text-decoration - 修飾線（下劃線、上劃線、刪除線）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-indent">MDN - text-indent - 首行縮進</a></li></ul><h3 id="背景">背景</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-color">MDN - background-color - 背景顏色</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-image">MDN - background-image - 背景圖片</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-repeat">MDN - background-repeat - 背景重複</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/background-attachment">MDN - background-attachment - 是否隨著頁面滾動</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-position">MDN - background-position - 背景位置</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size">MDN - background-size - 背景圖片大小</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background">MDN - background - 簡寫</a></li></ul><h2 id="元素顯示模式">元素顯示模式</h2><p>可以透過 display 屬性強制改變顯示模式。</p><table>  <thead>    <tr>      <th>元素模式</th>      <th>元素排列</th>      <th>可調整寬高</th>      <th>默認寬度</th>      <th>嵌套</th>    </tr>  </thead>  <tbody>    <tr>      <td>塊級元素</td>      <td>獨佔一行</td>      <td>true</td>      <td>父元素的 100%</td>      <td>可嵌套任意元素</td>    </tr>    <tr>      <td>行內元素</td>      <td>一行可以有多個行內元素</td>      <td>false</td>      <td>本身內容的寬度</td>      <td>可嵌套任意元素</td>    </tr>    <tr>      <td>行內塊元素</td>      <td>一行可以有多個行內塊元素</td>      <td>true</td>      <td>本身內容的寬度</td>      <td></td>    </tr>  </tbody></table><h2 id="三大特性">三大特性</h2><h3 id="層疊">層疊</h3><p>當選擇器相同時（權重相等），後選擇的會覆蓋（層疊）原本的樣式，主要解決樣式衝突的問題。</p><h3 id="繼承">繼承</h3><p>在 CSS 裡有部分的樣式會繼承父元素的樣式。</p><ul><li>洽當的使用繼承可以簡化樣式</li><li>繼承 <code>text-</code>, <code>font-</code>, <code>line-</code> 這些屬性開頭的樣式，以及 <code>color</code>（主要是文字樣式）</li></ul><h3 id="優先級">優先級</h3><p>當一個元素有不同的選擇器選取時，就會有優先級的產生。</p><ul><li>選擇器相同，使用層疊特性</li><li>選擇器不同，根據<code>選擇器的權重</code>使用樣式</li></ul><table>  <thead>    <tr>      <th>選擇器</th>      <th>權重</th>    </tr>  </thead>  <tbody>    <tr>      <td>繼承 / *</td>      <td>0, 0, 0, 0</td>    </tr>    <tr>      <td>標籤選擇器</td>      <td>0, 0, 0, 1</td>    </tr>    <tr>      <td>類 / 偽類選擇器</td>      <td>0, 0, 1, 0</td>    </tr>    <tr>      <td>ID 類選擇器</td>      <td>0, 1, 0, 0</td>    </tr>    <tr>      <td>行內樣式</td>      <td>1, 0, 0, 0</td>    </tr>    <tr>      <td>!important</td>      <td>無窮大</td>    </tr>  </tbody></table><h2 id="盒子模型">盒子模型</h2><p>每一個元素都是一個盒子。</p><img alt="盒子模型的組成" src="https://cdn.jsdelivr.net/gh/NekoChanTaiwan/blog@gh-pages/posts/8933/box_model.png" style="margin-left:0;"><p><code>padding</code>, <code>border</code>, <code>margin</code> 分別也是可以設定的樣式。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding">MDN - padding - 內邊距</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border">MDN - border - 邊框</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin">MDN - margin - 外邊距</a></li></ul><h4 id="外邊距合併">外邊距合併</h4><p>當兩個元素（兄弟關係）的垂直外邊距相遇時，會取其中較大值。</p><p>解決方法：</p><ul><li>只添加其中一個元素外邊距</li></ul><img alt="外邊距合併" src="https://cdn.jsdelivr.net/gh/NekoChanTaiwan/blog@gh-pages/posts/8933/margin_collapsing1.webp" style="margin-left:0;"><h4 id="外邊距塌陷">外邊距塌陷</h4><p>當父子元素都擁有上外邊距時，此時會只剩父元素上外邊距，且外邊距值為兩者的最大值。</p><p>解決方法：</p><ul><li>觸發 BFC</li></ul><img alt="外邊距塌陷" src="https://cdn.jsdelivr.net/gh/NekoChanTaiwan/blog@gh-pages/posts/8933/margin_collapsing2.webp" style="margin-left:0;"><h5 id="BFC">BFC</h5><p>BFC（Block Formatting Context），塊級格式上下文。</p><p>BFC 決定了元素對其內容定位，以及當前元素與其他元素之間的關係和互相作用。</p><p>目的就是形成一個獨立空間，讓空間中的子元素不會影響到這個獨立空間之外的佈局。</p><p>觸發 BFC 的方法：</p><ul><li>子元素 或 父元素 的 <code>float</code> 值不為 <code>none</code>。</li><li>子元素 或 父元素 的 <code>position</code> 值不為 <code>relative</code> 或 <code>static</code>。</li><li>父元素 的 <code>overflow</code> 值為 <code>auto</code> 或 <code>scroll</code> 或 <code>hidden</code>。</li><li>父元素 的 <code>display</code> 值為 <code>tabel-cell</code> 或 <code>inline-block</code>。</li></ul><div class="note info flat"><p>推薦使用 overflow: hidden; 對佈局的影響最小。</p></div><h2 id="佈局">佈局</h2><p>傳統開發中，一個頁面基本上都包含了這三種佈局方式。</p><ul><li>標準流</li><li>浮動</li><li>定位</li></ul><h3 id="標準流">標準流</h3><p>（又稱普通流、文檔流）</p><p>所謂的 標準流 就是標籤按照規定好的默認方法排列。</p><ul><li>塊級元素會獨佔一行，從上向下排序。</li><li>行內元素會按照順序，從左至右排序，碰到父元素邊緣則自動換行。</li></ul><h3 id="浮動">浮動</h3><h4 id="探討">探討</h4><ul><li>為什麼需要浮動？</li></ul><p>有很多佈局標準流沒辦法實現，浮動可以改變元素標籤的默認排序方式。</p><p>總結：多個塊級元素縱向排列使用標準流，多個塊級元素橫向排序使用浮動。</p><ul><li>什麼是浮動？</li></ul><p>float 屬性用於創建浮動框，將其移動到一邊，直到邊緣觸及包含塊或另一個浮動框邊緣。</p><table>  <thead>    <tr>      <th>屬性值</th>      <th>說明</th>    </tr>  </thead>  <tbody>    <tr>      <td>none</td>      <td>元素不浮動（默認值）</td>    </tr>    <tr>      <td>left</td>      <td>元素向左浮動</td>    </tr>    <tr>      <td>right</td>      <td>元素向右浮動</td>    </tr>  </tbody></table><h4 id="特性">特性</h4><ul><li>脫離標準流</li></ul><p>脫離標準流的控制（浮）移動到指定位置（動）<br>浮動的盒子不再保留原先的位置（已經不在標準流裡了，所以也不會有外邊距塌陷的問題）</p><ul><li>一行內顯示與頂部對齊</li></ul><p>浮動的元素是互相貼在一起的（不會有縫隙），如果父級容器裝不下這些浮動盒子，多出來的盒子則會移動至下一行。</p><ul><li>具有行內塊元素特性</li></ul><p>任何元素都可以浮動，不管原先是什麼元素，添加浮動之後就會具有行內塊相似的特性。</p><ul><li>浮動的元素不會壓住底下的文字</li></ul><p>浮動當初的設計就是為了做文字圍繞的效果（文字會圍繞浮動元素，通常是浮動圖片元素）。</p><h4 id="使用">使用</h4><p>為了約束浮動元素的位置，網頁一般的採取策略是：</p><p>先用標準流的父元素排列上下位置，之後再將子元素浮動排列左右位置。</p><h4 id="注意">注意</h4><p>使用當元素浮動時，通常會讓其他子元素一起浮動，否則會有奇怪的效果。</p><p>浮動會影響後面的子元素，不會影響前面的子元素。</p><h4 id="清除浮動">清除浮動</h4><h5 id="高度塌陷">高度塌陷</h5><p>有很多情況父元素不方便直接把高度定死，<br>所以當子元素開啟浮動時，原來的位子消失了，<br>父元素的高度也就沒了，這就是高度塌陷。</p><h5 id="本質">本質</h5><p>清除浮動的本質是清除浮動元素造成的影響，<br>如果父元素有高度，則不需要清除浮動。</p><p>清除浮動之後，父級就會根據浮動的子元素自動檢測高度。<br>父級有了高度，就不會影響後面的標準流了。</p><h5 id="清除浮動樣式">清除浮動樣式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">clear</span>: 屬性值;<br>&#125;<br></code></pre></td></tr></table></figure><table>  <thead>    <tr>      <th>屬性值</th>      <th>說明</th>    </tr>  </thead>  <tbody>    <tr>      <td>left</td>      <td>清除左側浮動的影響</td>    </tr>    <tr>      <td>right</td>      <td>清除右側浮動的影響</td>    </tr>    <tr>      <td>both</td>      <td>清除兩側浮動的影響</td>    </tr>  </tbody></table><div class="note info flat"><p>提示 : 實際開發中通常只使用 both。</p></div><h5 id="策略">策略</h5><p>閉合浮動，只讓浮動在父元素內部影響，不影響外面的其他和元素。</p><h5 id="額外標籤法">額外標籤法</h5><p>又稱隔牆法， W3C 推薦的方法。</p><ul><li>優點：通俗易懂</li><li>缺點：過多無意義標籤，結構化較差</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clear</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p>在最後一個浮動元素後面新增一個塊級元素並使用清除浮動屬性。</p><p>實際開發可能會遇到，但是不常用。</p><h5 id="overflow">overflow</h5><ul><li>優點：簡潔</li><li>缺點：無法顯示溢出的部分</li></ul><p>給父級元素添加 <code>overflow</code> 屬性，<br>將其屬性值設定為 <code>hidden</code>、<code>auto``` </code>scroll`。</p><h5 id="after">:after</h5><p>額外標籤法 的升級版。<br>也是給父元素添加樣式。</p><ul><li>優點：沒有新增標籤，結構更簡單</li><li>缺點：照顧低版本瀏覽器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><br><span class="hljs-comment">/* 兼容 IE6、7 */</span><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="雙偽元素">雙偽元素</h5><p>也是給父元素添加樣式。</p><ul><li>優點：樣式更簡潔</li><li>缺點：照顧低版本瀏覽器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: table;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="總結">總結</h5><table>  <thead>    <tr>      <th>屬性值</th>      <th>優點</th>      <th>缺點</th>    </tr>  </thead>  <tbody>    <tr>      <td>額外標籤法（隔牆法）</td>      <td>通俗易懂</td>      <td>過多無意義標籤，結構化較差</td>    </tr>    <tr>      <td>父級 overflow</td>      <td>簡潔</td>      <td>溢出隱藏</td>    </tr>    <tr>      <td>父級 :after</td>      <td>結構語義化正確</td>      <td>兼容性問題：IE6、7 不支援 :after</td>    </tr>    <tr>      <td>父級 雙偽元素</td>      <td>結構語義化正確</td>      <td>兼容性問題：IE6、7 不支援 :after, :before</td>    </tr>  </tbody></table><div class="note info flat"><p>提示 : 當浮動元素影響了後面標準流的佈局時，才應該清除浮動。</p></div><h3 id="定位">定位</h3><h4 id="探討-2">探討</h4><ul><li>為什麼需要定位？</li></ul><p>讓盒子自由的在某個盒子內移動位置或者固定在特定位置，並壓住其他盒子。</p><h4 id="組成">組成</h4><p>定位 = 定位模式 + 偏移量（可選）</p><h5 id="定位模式">定位模式</h5><p>定位模式使用 position 設置，值有五個：</p><table>  <thead>    <tr>      <th>屬性值</th>      <th>語意</th>    </tr>  </thead>  <tbody>    <tr>      <td>static</td>      <td>靜態定位</td>    </tr>    <tr>      <td>relative</td>      <td>相對定位</td>    </tr>    <tr>      <td>absolute</td>      <td>絕對定位</td>    </tr>    <tr>      <td>fixed</td>      <td>固定定位</td>    </tr>    <tr>      <td>sticky</td>      <td>黏性定位</td>    </tr>  </tbody></table><h5 id="偏移量屬性">偏移量屬性</h5><table>  <thead>    <tr>      <th>屬性</th>      <th>語意</th>    </tr>  </thead>  <tbody>    <tr>      <td>top</td>      <td>離上方的偏移量</td>    </tr>    <tr>      <td>bottom</td>      <td>離下方的偏移量</td>    </tr>    <tr>      <td>left</td>      <td>離左方的偏移量</td>    </tr>    <tr>      <td>right</td>      <td>離右方的偏移量</td>    </tr>  </tbody></table><h5 id="定位語法">定位語法</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">position</span>: 定位模式;<br>  <span class="hljs-attribute">top</span>: 偏移量;<br>  <span class="hljs-attribute">bottom</span>: 偏移量;<br>  <span class="hljs-attribute">left</span>: 偏移量;<br>  <span class="hljs-attribute">right</span>: 偏移量;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="靜態定位">靜態定位</h4><p>元素的默認定位方式，無定位的意思，可以說是按照標準流的且沒有偏移量。</p><h4 id="相對定位">相對定位</h4><p>以元素當前的位置作為基準 + 偏移量 就是相對定位</p><p>(圖)</p><p>特點：</p><ul><li>佔有原先位置</li></ul><div class="note info flat"><p>提示 : 相對定位通常用於當絕對定位的父元素</p></div><h4 id="絕對定位">絕對定位</h4><p>向上尋找有使用定位（除了靜態）的父元素作為基準（沒有則使用 document） + 偏移量</p><p>（圖）</p><p>元素視口置中技巧：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">margin-right</span>: 自身元素寬度一半;<br>&#125;<br></code></pre></td></tr></table></figure><p>特點：</p><ul><li>不佔有原先位置</li></ul><h4 id="固定定位">固定定位</h4><p>以視口作為基準點 + 偏移量</p><p>（圖）</p><p>特點：</p><ul><li>以視口作為基準點移動位置</li></ul><h4 id="黏性定位">黏性定位</h4><p>該定位模式目前兼容性還不太好（通常使用 JS 實現此效果）</p><p>黏性定位可以說是 相對定位 和 固定定位 的混合。</p><p>特點：</p><ul><li>以視口作為基準點移動元素（固定定位特點）</li><li>佔有原先位置（相對定位特點）</li><li>必須使用其中一個 偏移量屬性才有效</li></ul><h4 id="疊放順序">疊放順序</h4><p>使用 <code>z-index: 優先順序（數值）</code> 調整元素的疊放順序（類似圖層）</p><h4 id="特殊特性">特殊特性</h4><ul><li>行內元素使用絕對或固定定位，可以直接調整高度和寬度。</li><li>塊級元素使用絕對或固定定位，若不指定高寬，默認則為內容大小。</li><li>絕對定位與固定定位元素會壓住底下的文字（與浮動元素的特性相反）。</li></ul><h2 id="隱藏元素">隱藏元素</h2><p>隱藏元素有兩種方式，分別為 <code>display: none</code>、<code>visibility: hidden</code>。</p><p><code>display</code> 是更改元素的顯示模式，<code>none</code> 代表完全不顯示。（包括元素的位子）<br><code>visibility</code> 是更元素的可見狀態，<code>hidden</code> 代表隱藏（不可見）。（不包括元素的位子）</p><h2 id="特殊技巧">特殊技巧</h2><h3 id="等腰三角型">等腰三角型</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">100px</span> solid transparent;<br>  <span class="hljs-attribute">border-bottom-color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="直角三角形">直角三角形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">200px</span> solid transparent;<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid pink;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文字圍饒">文字圍饒</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="單行省略號">單行省略號</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><br>  <span class="hljs-comment">/* １. 不換行 */</span><br>  <span class="hljs-attribute">white-space</span>: nowarp;<br>  <span class="hljs-comment">/* 2. 溢出的部份部顯示 */</span><br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-comment">/* 3. 溢出的文字使用省略號 */</span><br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多行省略號">多行省略號</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overlfow</span>: ellipsis;<br><br>  <span class="hljs-comment">/* 彈性伸縮盒 */</span><br>  <span class="hljs-attribute">display</span>: -webkit-box;<br>  <span class="hljs-comment">/* 限制在一個元素顯示的文字行數 */</span><br>  <span class="hljs-attribute">-webkit-line-clamp</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">/* 設定伸縮盒的排列方式 */</span><br>  <span class="hljs-attribute">-webkit-box-orient</span>: vertical;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="精靈圖">精靈圖</h2><p>精靈圖（sprite）又稱 雪碧圖 或 拼合圖，主要是把部分網頁需要用的圖片整合到一張圖片裡。</p><p>優點：可以減少伺服器的網路請求，降低伺服器壓力。<br>缺點：後期修改其中圖片，可能會動到其他圖片，導致所有圖片受影響。</p><h3 id="使用方式">使用方式</h3><p>調整 <code>background-position</code> 的 <code>x</code>、<code>y</code> ，當然也可以全寫到 <code>background</code>。</p><p>我使用 <code>Adobe Photoshop</code> 按 <code>M</code>（矩形選取畫面工具）選取後再按 <code>Ctrl+T</code>（變形），<br>接著可以從 資訊視窗（<code>F8</code>）查看選取後的座標。</p><p><img src="https://cdn.jsdelivr.net/gh/NekoChanTaiwan/blog@gh-pages/posts/8933/photoshop1.png" alt="Adobe Photoshop - 查找精靈圖選取座標"></p><p>如上圖中資訊裡的座標，在 CSS 中應該要這麼寫：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">... &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">184px</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note info flat"><p>注意：座標必需為負值，因為是移動背景圖片。</p></div><hr><p>封面來源 ：</p><ul><li><a href="https://www.pixiv.net/artworks/85218024">甘城なつき - ！！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 網頁前端 </category>
          
          <category> 重新認識 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 常用快捷鍵</title>
      <link href="posts/3547/"/>
      <url>posts/3547/</url>
      
        <content type="html"><![CDATA[<h2 id="一般">一般</h2><ul><li>命令面板：<code>F1</code></li><li>開啟終端機：<code>CTRL + ~</code></li><li>關閉當前檔案：<code>CTRL + W</code></li><li>搜尋並開啟檔案：<code>CTRL + E</code></li><li>切換已開啟的檔案：<code>CTRL + TAB</code></li><li>存檔：<code>CTRL + S</code></li></ul><h2 id="編輯">編輯</h2><ul><li>複製：<code>CTRL + C</code></li><li>複製該行（不選取）：<code>CTRL + C</code></li><li>剪下：<code>CTRL + X</code></li><li>剪下該行（不選取）：<code>CTRL + X</code></li><li>貼上：<code>CTRL + V</code></li><li>複製該行至下一行：<code>SHIFT + ALT + 方向鍵下</code></li><li>調整該行順序：<code>ALT + 方向鍵上下</code></li><li>插入下一行：<code>CTRL + ENTER</code></li><li>註解該行：<code>CTRL + /</code></li><li>前往指定行數：<code>CTRL + G</code></li><li>跳至該行首部或尾部：<code>HOME / END</code></li><li>選取：<code>SHIFT + 方向鍵左右</code></li><li>智慧選取：<code>SHIFT + CTRL + 方向鍵左右</code></li><li>多重選取：<code>ALT + CLICK</code></li><li>多重選取相同字符：<code>CTRL + F2</code></li><li>復原上一次多重選取：<code>CTRL + U</code></li></ul><h2 id="插件">插件</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file">advanced-new-file</a>：<ul><li>創建檔案：指令 “<code>Advanced New File</code>” 建議設定自訂快捷建 “<code>CTRL + N</code>”</li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils">File Utils</a><ul><li>重新命名：指令 “<code>File Utils: Rename</code>”</li><li>移動檔案：指令 “<code>File Utils: Move</code>”</li><li>刪除檔案：指令 “<code>File Utils: Delete</code>”</li></ul></li></ul><hr><p>封面來源 ：</p><ul><li><a href="https://www.pixiv.net/artworks/85618605">なび - Ame</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基礎知識整理</title>
      <link href="posts/c7f3/"/>
      <url>posts/c7f3/</url>
      
        <content type="html"><![CDATA[<h2 id="請照順序食用">請照順序食用</h2><ol><li><a href="https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/How_the_Web_works">MDN - 網路如何運作</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_URL">MDN - 什麼是 URL？</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_domain_name">MDN - 什麼是 域名？</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines">MDN - 網站、網頁、網路伺服器和搜尋引擎的區別是什麼？</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Learn/Common_questions/What_is_a_web_server">MDN - 何謂網路伺服器？</a></li><li><a href="https://youtu.be/iidqJ7p7ln4">Youtube - 網路是如何運作的？</a></li><li><a href="https://youtu.be/o0dO5iXbCCs">Youtube - http 和 https 有什麼區別？</a></li><li><a href="https://youtu.be/tVNx-6OEy-k">Youtube - IPv4 和 IPv6 有什麼區別？</a></li><li><a href="https://youtu.be/2QJLxhS2lXw">Youtube - DNS 服務、DNS 解析、DNS 劫持與污染</a></li><li><a href="https://youtu.be/jaPpP3cdgDQ">Youtube - 瀏覽器運行原理</a></li><li><a href="https://dotblogs.com.tw/Im_sqz777/2017/07/26/220713">sqz777 der 技術小本本 - 相對路徑 和 絕對路徑</a></li></ol><hr><p>封面來源 ：</p><ul><li><a href="https://www.pixiv.net/artworks/81856932">とぴあ - 🌸</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 網頁前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知識整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新認識 HTML</title>
      <link href="posts/8f1b/"/>
      <url>posts/8f1b/</url>
      
        <content type="html"><![CDATA[<h2 id="網頁概念">網頁概念</h2><h3 id="什麼是網頁">什麼是網頁 ?</h3><p>網頁是網站中的其中一頁，通常為 HTML 格式的檔案，它需要通過瀏覽器來閱讀。</p><p>網頁是構成網站的基本元素，它通常由 圖片、連結、文字、影片、音效等元素組成。</p><p>通常網頁以 .htm 或 .html 作為副檔名，因此俗稱為 HTML 檔案。</p><h3 id="什麼是-HTML">什麼是 HTML ?</h3><p>HTML 指的是 超文本標記語言 (<u>H</u>yper <u>T</u>ext <u>M</u>arkup <u>L</u>anguage)。</p><p>HTML 不是一種程式語言，而是一種標記語言 (Markup Language)。</p><h4 id="標記-標籤">標記 / 標籤</h4><p>標記是一種行為，在 HTML 中會以標籤包裹內容組成一個元素，這個行為就叫做標記。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">標籤</span>&gt;</span>內容<span class="hljs-tag">&lt;/<span class="hljs-name">標籤</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NekoChanTaiwan/blog@gh-pages/posts/8f1b/grumpy-cat-small.webp" alt="HTML 元素"><br>（ 圖片來源：<a href="https://developer.mozilla.org/zh-TW/docs/learn/HTML/Introduction_to_HTML/Getting_started">MDN - Getting started with HTML</a> ）<br>HTML 元素（Element）由以下組成：</p><ul><li>起始標籤（Opening tag）</li><li>結束標籤（Closing tag）</li><li>內容（Content）</li></ul><h4 id="超文本">超文本</h4><p>HTML 可以使用 圖片、影片、音效、多媒體等內容 (超越了文本限制)，<br>HTML 還可以從一個頁面跳轉到另一個頁面 (超級連結文本)。</p><h3 id="網頁的形成">網頁的形成 ?</h3><p>網頁是由網頁元素組成的，這些元素是利用 HTML 標籤描述出來的，最終會透過瀏覽器解析給使用者。</p><h3 id="總結">總結</h3><p>網頁是由 圖片、連結、文字、音效、影片等元素組成，副檔名為 html。</p><p>HTML(超文本標記語言)，用於製作網頁的一門語言，由許多標籤組成的，<br>比如 圖片標籤、連結標籤、影片標籤等等 …</p><h2 id="常用瀏覽器">常用瀏覽器</h2><p>網頁是通過瀏覽器來展示的，關於瀏覽器必需要了解以下兩點 :</p><h3 id="常見的瀏覽器有哪些">常見的瀏覽器有哪些 ?</h3><ul><li>IE / Edge</li><li>Chrome</li><li>Firefox</li><li>Safari</li><li>Opera</li></ul><p>建議使用 Chrome 做於開發使用。</p><h3 id="瀏覽器內核">瀏覽器內核</h3><p>瀏覽器內核 (渲染引擎) : 負責讀取網頁內容，計算網頁的顯示方式並顯示頁面。</p><table>    <tr>      <th>瀏覽器</th>      <th>內核</th>      <th>備註</th>    </tr>    <tr>      <td>IE</td>      <td>Trident</td>      <td></td>    </tr>    <tr>      <td>Firefox</td>      <td>Gecko</td>      <td></td>    </tr>    <tr>      <td>Safari</td>      <td>WebKit</td>      <td></td>    </tr>    <tr>      <td>Chrome / Opera</td>      <td>Blink</td>      <td>Blink 其實是 WebKit 的分支</td>    </tr></table><h2 id="Web-標準">Web 標準</h2><p>Web 標準是由 W3C 組織和其他標準化組織制定的一系列標準的集合。</p><p>W3C 是國際最著名的標準化組織。</p><h3 id="為什麼需要-Web-標準">為什麼需要 Web 標準</h3><p>瀏覽器不同，它們顯示頁面或者排版就有些差異。</p><p>如果沒有 Web 標準，我們寫出來的網頁可能在不同瀏覽器展示都會是不一樣的。</p><p>遵循 Web 標準除了可以讓不同開發人員寫出來的頁面更標準、更統一以外，還有以下優點 :</p><ul><li>讓 Web 發展前景更廣闊</li><li>內容能被更廣泛的設備使用</li><li>更容易被搜尋引擎搜到</li><li>更易於維護</li></ul><h3 id="Web-標準的構成">Web 標準的構成</h3><p>主要包括 結構 (Structure) 、 表現 (Presentation) 和 行為 (Behavior) 三個方面。</p><table>    <tr>      <th>結構</th>      <th>說明</th>    </tr>    <tr>      <td>結構 (Structure)</td>      <td>結構用於對網頁元素進行整理和分類，主要是指 HTML。</td>    </tr>    <tr>      <td>表現 (Presentation)</td>      <td>表現用於設定網頁元素的外觀樣式，主要是指 CSS。</td>    </tr>    <tr>      <td>行為 (Behavior)</td>      <td>行為式指網頁模型的定義及交互的編寫，主要是指 JavaScript。</td>    </tr></table><p>Web 標準提出的最佳體驗方案 : 結構, 樣式, 行為 相分離。</p><h3 id="總結-2">總結</h3><ul><li>結構 寫到 HTML 中</li><li>表現 寫到 CSS 中</li><li>行為 寫到 JavaScript 中</li></ul><h2 id="語法規範">語法規範</h2><h3 id="基本語法概述">基本語法概述</h3><ul><li>HTML 標籤是由尖括號包圍的關鍵字，例如 <code>&lt;html&gt;</code>。</li><li>HTML 標籤通常是成對出現的，例如 <code>html</code> 和 <code>&lt;/html&gt;</code>，稱為 雙標籤。<br>（雙標對中的第一個是開始標籤，第二個是結束標籤（注意有反斜槓）。）</li><li>有些特殊標籤必需是單個標籤（極少情況），例如<code>&lt;br /&gt;</code>，稱為 單標籤。</li></ul><h3 id="標籤關係">標籤關係</h3><p>雙標籤關係可以分為兩類：包含關係 和 並列關係。</p><p>包含關係（嵌套 / 父子） :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>並列關係（兄弟） :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基本結構標籤">基本結構標籤</h2><p>每個網頁都會有一個基本結構標籤（也稱骨架標籤），頁面內容也是在這些基本標籤上書寫。<br>（HTML頁面 也稱為 HTML文檔）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基本結構標籤<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    Hello, World!<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><table>    <tr>      <th>標籤</th>      <th>定義</th>      <th>說明</th>    </tr>    <tr>      <td>&lt;html&gt;</td>      <td>文檔的根部</td>      <td>頁面中最大的標籤，稱為 <b>根標籤</b>。</td>    </tr>    <tr>      <td>&lt;head&gt;</td>      <td>文檔的頭部</td>      <td>注意在 head 標籤中必需要設定 title 標籤</td>    </tr>    <tr>      <td>&lt;title&gt;</td>      <td>文檔的標題</td>      <td>網頁標題</td>    </tr>    <tr>      <td>&lt;body&gt;</td>      <td>文檔的主體</td>      <td>頁面的內容基本都是在 body 裡面</td>    </tr></table><h3 id="心智圖">心智圖</h3><p><img src="https://cdn.jsdelivr.net/gh/NekoChanTaiwan/blog@gh-pages/posts/8f1b/html01v3.webp" alt="HTML 基本結構標籤 心智圖"></p><h3 id="重要標籤">重要標籤</h3><p>若使用 VSCode 生成 HTML基本結構，會發現有許多標籤。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>目前只需要知道三個標籤。</p><table>    <tr>      <th>標籤</th>      <th>定義</th>      <th>說明</th>    </tr>    <tr>      <td>&lt;!DOCTYPE html&gt;</td>      <td>文檔類型聲明標籤</td>      <td>用於告知瀏覽器當前的頁面是 HTML5版本</td>    </tr>    <tr>      <td>&lt;html lang="en"&gt;</td>      <td>當前頁面語言</td>      <td>用於告知瀏覽器或搜尋引擎當前頁面的語言</td>    </tr>    <tr>      <td>&lt;meta charset="UTF-8"&gt;</td>      <td>當前頁面的字符編碼</td>      <td>通常使用 UTF-8 防止出現亂碼</td>    </tr></table><h3 id="標籤語意">標籤語意</h3><p>學習標籤時，重點要記住每一個標籤的語意。</p><p>簡單理解就是指標籤的含義，在說白一點就是這標籤是用來幹嘛的。</p><p>根據標籤的語意，在合適的地方給一個最為合理的標籤，可以讓頁面結構更清晰。</p><h2 id="常用標籤">常用標籤</h2><h3 id="標題標籤">標題標籤</h3><p>為了使網頁更具有語意話，我們經常在頁面中用到標題標籤。</p><p>HTML 提供了 6 個等級的網頁標題，及 &lt;h1&gt; ~ &lt;h6&gt; 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一級標題<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二級標題<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三級標題<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四級標題<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五級標題<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六級標題<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><p>該標籤為 head 的縮寫，意味 頭部、標題。</p><p>標籤語意：作為標題使用，根據重要性遞減。</p><p>特點：</p><ul><li>使用標題標籤的文字會變粗，字號也會依次變大。</li><li>一個標題獨佔一行。</li></ul><h3 id="段落與換行標籤">段落與換行標籤</h3><p>在網頁中，要把文字有條理的顯示出來，就需要將文字分段顯示。</p><p>在 HTML 標籤中，&lt;p&gt; 用於定義段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>該標籤為 paragraph 的縮寫，意味 段落。</p><p>標籤語意：為文字分割段落。</p><p>特點：</p><ul><li>在段落中的文字會根據瀏覽器窗口的大小自動換行。</li><li>段落和段落之間會有空隙。</li></ul><hr><p>在 HTML 中，一個段落中的文字會從左到右依次排列，直到瀏覽器窗口的右端，然後才自動換行。</p><p>如果希望某段文字強制換行，就需要使用 &lt;br /&gt;。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>該標籤為 break 的縮寫，意味 打斷、換行。</p><p>標籤語意：強制換行。</p><p>特點：</p><ul><li>&lt;br /&gt; 是單標籤。</li><li>&lt;br /&gt; 標籤是強制換行，跟段落之間不一樣，段落之間會有空隙。</li></ul><h3 id="文字格式化標籤">文字格式化標籤</h3><p>在網頁中有時需要為文字設定 <strong>粗體</strong>、<em>斜體</em>、<ins>下劃線</ins>、<del>刪除線</del>等效果，這時就需要用到 HTML 中的文字格式化標籤，使文字以特殊的方式顯示。</p><p>標籤語意：突出重要性，比普通文字更重要。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">我是<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加粗<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>的文字<br>我是<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>加粗<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>的文字<br><br>我是<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>傾斜<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>的文字<br>我是<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>傾斜<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>的文字<br><br>我是<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>刪除線<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br>我是<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>刪除線<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br><br>我是<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>下劃線<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br>我是<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>下劃線<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><table>    <tr>      <th>語意</th>      <th>標籤</th>      <th>說明</th>    </tr>    <tr>      <td>加粗</td>      <td>&lt;strong&gt; 或 &lt;b&gt;</td>      <td>更推薦使用 &lt;strong&gt; 標籤，語意更強烈。</td>    </tr>    <tr>      <td>傾斜</td>      <td>&lt;em&gt; 或 &lt;i&gt;</td>      <td>更推薦使用 &lt;em&gt; 標籤，語意更強烈。</td>    </tr>    <tr>      <td>下劃線</td>      <td>&lt;ins&gt; 或 &lt;u&gt;</td>      <td>更推薦使用 &lt;ins&gt; 標籤，語意更強烈。</td>    </tr>    <tr>      <td>刪除線</td>      <td>&lt;del&gt; 或 &lt;s&gt;</td>      <td>更推薦使用 &lt;del&gt; 標籤，語意更強烈。</td>    </tr></table><h3 id="盒子標籤">盒子標籤</h3><p>&lt;div&gt; 和 &lt;span&gt; 是沒有語意的，它們就只是個盒子，用來裝內容的。</p><p>主要用途是用來布局，在學習 CSS 時才能真正理解這兩個標籤的用途。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>DIV標籤<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>SPAN標籤<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特點：</p><ul><li>&lt;div&gt; 標籤用於布局，但是現在一行只能放一個&lt;div&gt;。(大盒子)</li><li>&lt;span&gt; 標籤用於布局，一行上可以有多個&lt;span&gt;。(小標籤)</li></ul><h3 id="圖片標籤">圖片標籤</h3><p>在 HTML 中 &lt;img&gt; 用於定義頁面中的圖片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;圖片路徑&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>該標籤為 image 的縮寫，意味 圖片。</p><p>src 是 &lt;img&gt; 必需的屬性。</p><p>屬性通常以 鍵值對 來表示，鍵值對會有一個 鍵名(key) 和 鍵值(value)。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">鍵名: 鍵值<br>key: value<br></code></pre></td></tr></table></figure><p>屬性就代表元素的特性。</p><p>圖片標籤的屬性 :</p><table>    <tr>      <th>屬性</th>      <th>屬性值</th>      <th>說明</th>    </tr>    <tr>      <td>src</td>      <td>圖片路徑</td>      <td>必需屬性</td>    </tr>    <tr>      <td>alt</td>      <td>文字</td>      <td>替換文字，當圖片顯示不出來時顯示。</td>    </tr>    <tr>      <td>title</td>      <td>文字</td>      <td>提示文字，當游標移至圖片上時顯示。</td>    </tr>    <tr>      <td>width</td>      <td>像素</td>      <td>圖片的寬度</td>    </tr>    <tr>    <td>height</td>      <td>像素</td>      <td>圖片的高度</td>    </tr>    <tr>    <td>border</td>      <td>像素</td>      <td>圖片邊框的粗細</td>    </tr></table><p>屬性沒有先後順序，屬性必需寫在標籤名後面。</p><h3 id="超連結標籤">超連結標籤</h3><p>&lt;a&gt; 用於定義超連結，作用是從一個頁面連結到另一個頁面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;跳轉目標&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;連結頁面的開啟方式&quot;</span>&gt;</span>文字或圖片<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>該標籤為 anchor 的縮寫，意味 錨。</p><table>    <tr>      <th>屬性</th>      <th>作用</th>    </tr>    <tr>      <td>href</td>      <td>必需屬性，用於指定連結的 url 地址。</td>    </tr>    <tr>      <td>target</td>      <td>用於指定連結頁面的開啟方式，默認為 self，_blank 為在新頁面開啟。</td>    </tr></table><p>連結分類 :</p><ul><li>外部連結 :如 <code>&lt;a href=&quot;https://www.google.com.tw/&quot;&gt;Google&lt;/a&gt;</code></li><li>內部連結 :<code>&lt;a href=&quot;./page2.html&quot;&gt;Go Page 2&lt;/a&gt;</code></li><li>空連結 :<code>&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;</code></li><li>下載連結 :<code>&lt;a href=&quot;./file.zip&quot;&gt;Download&lt;/a&gt;</code></li><li>網頁元素連結 :<code>&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;./img/xxx.png&quot;&gt;&lt;/a&gt;</code></li><li>錨點連結 : <code>&lt;a href=&quot;#title&quot;&gt;Go to title&lt;/a&gt;</code></li></ul><h3 id="註釋標籤">註釋標籤</h3><p>如果要在 HTML 添加方便閱讀和理解的文字但又不想顯示在頁面上，就需要註釋標籤。</p><p>HTML 中的註釋以 <code>&lt;!--</code> 開頭 <code>--&gt;</code> 結尾，被註釋標籤包裹的內容都不會被渲染到頁面上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- &lt;p&gt;段落&lt;/p&gt; --&gt;</span><br></code></pre></td></tr></table></figure><div class="note info flat"><p>提示 : VSCode 快捷鍵 : Ctrl + /</p></div><h3 id="轉義字符">轉義字符</h3><p>在 HTML 中有一些特殊符號無法直接使用，此時可以使用轉義字符來替代。</p><p>通常只需要記住 空格、大於號、小於號。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Entity#%E4%BF%9D%E7%95%99%E5%AD%97%E7%AC%A6">詳細閱讀</a></p><h3 id="表格標籤">表格標籤</h3><p>在 HTML 中表格是用於展示數據，而不是布局。</p><h4 id="基本標籤">基本標籤</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性別<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年齡<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Pekora<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Sakura Miko<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Fubuki<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table>    <tr>      <th>語意</th>      <th>標籤</th>      <th>說明</th>    </tr>    <tr>      <td>容器</td>      <td>&lt;table&gt;</td>      <td>表格最外層的容器</td>    </tr>    <tr>      <td>行</td>      <td>&lt;tr&gt;</td>      <td>表格中的每一行</td>    </tr>    <tr>    </tr>      <td>表頭單元格</td>      <td>&lt;th&gt;</td>      <td>表格中的第一行單元格（加粗、居中）</td>    <tr>      <td>單元格</td>      <td>&lt;td&gt;</td>      <td>行中的單元格</td>    </tr></table><h4 id="容器屬性">容器屬性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table>    <tr>      <th>屬性</th>      <th>屬性值</th>      <th>說明</th>    </tr>    <tr>      <td>align</td>      <td>left, center, right</td>      <td>規定表格相對元素的對其方式</td>    </tr>    <tr>      <td>border</td>      <td>像素</td>      <td>表格邊框</td>    </tr>    <tr>      <td>cellpadding</td>      <td>像素</td>      <td>單元格與內容的距離</td>    </tr>    <tr>      <td>cellspacing</td>      <td>像素</td>      <td>單元格與單元格的間距</td>    </tr></table><div class="note info flat"><p>提示 : 該屬性在實際開發時不常使用，通常都使用 CSS 取代。<br>【 Web 標準提出的最佳體驗方案 : 結構, 樣式, 行為 相分離 】</p></div><h4 id="結構標籤">結構標籤</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table>    <tr>      <th>語意</th>      <th>標籤</th>      <th>說明</th>    </tr>    <tr>      <td>表格頭部</td>      <td>&lt;thead&gt;</td>      <td>表格標籤的頭部區域，必需擁有 &lt;th&gt;，一般位於第一行。</td>    </tr>    <tr>      <td>表格主體</td>      <td>&lt;tbody&gt;</td>      <td>表格標籤的主體區域</td>    </tr></table><p>使用場景 : 表格數據可能非常多，為了更好表示表格的語意，可以將表格分成頭部語主體。</p><div class="note info flat"><p>提示 : 結構標籤都是在 &lt;table&gt; 裡面。</p></div><h4 id="合併-擴展-單元格">合併(擴展) 單元格</h4><p>合併單元格其實是擴展單元格。</p><p>在進行擴展單元格時先找出哪個是 目標單元格，擴展後再把多餘的單元格刪除。</p><p>目標單元格 : 擴展開始的單元格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;td&gt;&lt;/td&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;td&gt;&lt;/td&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table>    <tr>      <th>屬性</th>      <th>屬性值</th>      <th>說明</th>    </tr>    <tr>      <td>colspan</td>      <td>擴展單元格數量</td>      <td>跨列擴展</td>    </tr>    <tr>      <td>rowspan</td>      <td>擴展單元格數量</td>      <td>擴行擴展</td>    </tr></table><h3 id="列表標籤">列表標籤</h3><p>列表是用來布局的。<br>列表最大的特點就是 整齊、有序。</p><p>根據使用場景不同，列表可以分為三大類：無序列表、有序列表、字定義列表。</p><h4 id="無序列表">無序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>無序列表項<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>無序列表項<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>無序列表項<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>無序列表的各項列表項沒有順序級別之分，是並列的。</li><li>&lt;ul&gt; 裡只能嵌套 &lt;li&gt;。</li><li>&lt;li&gt; 相當於一個容器，可容納所有元素。</li><li>無序列表會帶有自己的樣式屬性，但實際開發時，我們會使用 CSS 來修改。</li></ul><h4 id="有序列表">有序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表項<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表項<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表項<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>&lt;ol&gt; 裡只能嵌套 &lt;li&gt;。</li><li>&lt;li&gt; 相當於一個容器，可容納所有元素。</li><li>有列表會帶有自己的樣式屬性，但實際開發時，我們會使用 CSS 來修改。</li></ul><div class="note info flat"><p>提示 : 有序列表在實際開發時，使用的不多。</p></div><h4 id="自定義列表">自定義列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>自定義列表標題<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定義列表項<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定義列表項<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>自定義列表項<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>&lt;dl&gt; 裡只能嵌套 &lt;dt&gt; 和 &lt;dd&gt;。</li><li>&lt;dt&gt; 和 &lt;dd&gt; 相當於一個容器，可容納所有元素。</li><li>自定義列表項會帶有自己的樣式屬性，但實際開發時，我們會使用 CSS 來修改。</li></ul><h3 id="表單標籤">表單標籤</h3><h4 id="表單組成">表單組成</h4><p>一個完整的表單通常由 表單域、表單元素、提示元素 3 個部分組成。</p><h4 id="表單域">表單域</h4><p>表單域是一個包含表單元素的區域。<br>&lt;form&gt; 用於定義表單域，以實現用戶資訊的收集和傳遞。</p><p>&lt;form&gt; 會把它所包含的保單元素提交給伺服器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;後台地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表單域名稱&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常用屬性 :</p><table>    <tr>      <th>屬性</th>      <th>屬性值</th>      <th>說明</th>    </tr>    <tr>      <td>action</td>      <td>後台地址</td>      <td>指定要發送的伺服器的 url 地址</td>    </tr>    <tr>      <td>method</td>      <td>get / post</td>      <td>發送提交的方式</td>    </tr>    <tr>      <td>name</td>      <td>名稱</td>      <td>指定當前表當域的名稱</td>    </tr></table><h4 id="表單元素">表單元素</h4><p>表單元素也稱表單控件，這些表單元素就是允許用戶在表單輸入或選擇的內容控件。</p><h5 id="輸入框">輸入框</h5><p>type 屬性可以讓 &lt;input&gt; 變成不同型態。</p><p>type 屬性的屬性值 :</p><table>    <tr>      <th>屬性值</th>      <th>說明</th>    </tr>    <tr>      <td>text</td>      <td>一般輸入框</td>    </tr>    <tr>      <td>password</td>      <td>密碼輸入框，字符會被隱藏。</td>    </tr>    <tr>      <td>radion</td>      <td>單選框</td>    </tr>    <tr>      <td>checkbox</td>      <td>複選框</td>    </tr>    <tr>      <td>submit</td>      <td>提交表單（發送至後台）</td>    </tr>    <tr>      <td>reset</td>      <td>重置表單（還原默認值）</td>    </tr>    <tr>      <td>button</td>      <td>普通按鈕（通常搭配 JavaScript）</td>    </tr>    <tr>      <td>file</td>      <td>檔案上傳</td>    </tr></table><p>除了 type 屬性外，還有其他常用的屬性 :</p><table>    <tr>      <th>屬性</th>      <th>屬性值</th>      <th>說明</th>    </tr>    <tr>      <td>name</td>      <td>自定義</td>      <td>定義 input 元素的名稱</td>    </tr>    <tr>      <td>value</td>      <td>自定義</td>      <td>定義 input 元素的值</td>    </tr>    <tr>      <td>checked</td>      <td>checked</td>      <td>定義 input 默認選中</td>    </tr>    <tr>      <td>maxlength</td>      <td>正整數</td>      <td>規定輸入的最大字符</td>    </tr></table><ul><li>name 和 value 是每個表單元素都有的屬性值，主要給後端人員使用。</li><li>vale 對於輸入框是屬於默認值。</li><li>單選框 和 複選框 各別要有相同的 name 值。</li><li>checked 屬性主要針對 單選框 和 複選。</li><li>maxlength 開發時使用較少，通常使用正則表達式代替。</li></ul><h5 id="表單說明">表單說明</h5><p>&lt;label&gt; 用於快速選取表單元素。（選取文字即可快速選中表單元素）</p><p>方法一 for屬性 與 id屬性 對應 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>使用者名稱: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NekoChan&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pw&quot;</span>&gt;</span>使用者密碼: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pw&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方法二 嵌套 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>    使用者名稱:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NekoChan&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>    使用者密碼:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="下拉選擇框">下拉選擇框</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>選項一<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>選項二<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>選項三<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>&lt;select&gt; 必需包含一個 &lt;option&gt;。</li><li>&lt;option&gt; 定義 <code>selected=&quot;selected&quot;</code> 代表默認選中項。</li></ul><h5 id="多行文本域">多行文本域</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文檔">文檔</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">MDN - HTML 元素</a></li></ul><hr><p>封面來源 ：</p><ul><li><a href="https://www.pixiv.net/artworks/83312954">なかしよん - 怒った余！！！💢💢</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 網頁前端 </category>
          
          <category> 重新認識 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 陣列方法</title>
      <link href="posts/209a/"/>
      <url>posts/209a/</url>
      
        <content type="html"><![CDATA[<h2 id="心智圖">心智圖</h2><p><img src="https://cdn.jsdelivr.net/gh/NekoChanTaiwan/blog@gh-pages/posts/209a/array_v5.webp" alt="JavaScript 陣列方法 - 心智圖"></p><div class="note info flat"><p>帶有 引號(＂) 代表會修改原陣列。<br>split 是字符串方法但會返回陣列。</p></div><h2 id="語法與說明">語法與說明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><div class="note info flat"><p>以下&quot;大部分&quot;的案例都會使用上方的變量。</p></div><h3 id="添加">添加</h3><h4 id="push">push</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    從陣列尾部添加 n 個元素</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.push(...elemN)</span><br><span class="hljs-comment"> *      - ...elemN : 添加 n 個元素</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    該陣列添加元素後的長度(length屬性)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.push(<span class="hljs-number">9</span>, <span class="hljs-number">8</span>)) <span class="hljs-comment">// 7</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4, 5, 9, 8]</span><br></code></pre></td></tr></table></figure><h4 id="unshift">unshift</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    從陣列頭部添加 n 個元素</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.unshift(...elemN)</span><br><span class="hljs-comment"> *      - ...elemN : 添加 n 個元素</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    該陣列添加元素後的長度(length屬性)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列。</span><br><span class="hljs-comment"> *    如果該陣列的元素非常多，可能會有索引值更新的效能問題。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.unshift(<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>)) <span class="hljs-comment">// 8</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [9, 8, 7, 1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="刪除">刪除</h3><h4 id="pop">pop</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    從陣列尾部移除 1 個元素</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.pop()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    移除的元素；若陣列為空則返回 undefined</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.pop()) <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h4 id="shift">shift</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    從陣列頭部移除 1 個元素</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.shift()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    移除的元素；若陣列為空則返回 undefined</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列。</span><br><span class="hljs-comment"> *    如果該陣列的元素非常多，可能會有索引值更新的效能問題。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.shift()) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="splice">splice</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    從 開始索引值 開始刪除 n 個元素，</span><br><span class="hljs-comment"> *    接著再添加 n 個元素。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.splice(start[, deleteCount, ...elemN])</span><br><span class="hljs-comment"> *      - start : 開始索引值</span><br><span class="hljs-comment"> *      - deleteCount [可選] : 刪除數量，不寫則刪除開始索引值後的所有元素</span><br><span class="hljs-comment"> *      - ...elemN [可選] : 添加 n 個元素</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    被移除的元素組成的陣列；沒有刪除則返回空陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列。</span><br><span class="hljs-comment"> *    包括開始索引值。</span><br><span class="hljs-comment"> *    如果該陣列的元素非常多，可能會有索引值更新的效能問題。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.splice(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>)) <span class="hljs-comment">// [3, 4, 5]</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 9, 8, 7]</span><br></code></pre></td></tr></table></figure><h3 id="轉換">轉換</h3><h4 id="fill">fill</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    使一個值來填充陣列，可指定開始索引值及結束索引值。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.fill(value[, start, end])</span><br><span class="hljs-comment"> *      - value : 用於填充的值</span><br><span class="hljs-comment"> *      - start [可選] : 開始索引值；預設為 0</span><br><span class="hljs-comment"> *      - end [可選] : 結束索引值；預設為陣列長度（.length）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    填充後的原陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列。</span><br><span class="hljs-comment"> *    包括開始索引值。</span><br><span class="hljs-comment"> *    不包括結束索引值。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.fill(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>)) <span class="hljs-comment">// [1, 2, 2, 2, 2, 2, 2]</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 2, 2, 2, 2, 2]</span><br></code></pre></td></tr></table></figure><h4 id="sort">sort</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    按照 原位(in-place)排序，更改元素的順序。(原位代表自身陣列內)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.sort([compareFunction])</span><br><span class="hljs-comment"> *      - compareFunction [可選] : 排序函式，會自動傳入兩個參數。</span><br><span class="hljs-comment"> *       （預設按照字符串的 Unicode 位點進行排序，可以傳入一個排序函式自訂排序方式）</span><br><span class="hljs-comment"> *        - firstEl : 第一個用於比較的元素</span><br><span class="hljs-comment"> *        - secondE1 : 第二個用於比較的元素</span><br><span class="hljs-comment"> *        - 返回值 : 會影響元素的排序</span><br><span class="hljs-comment"> *            - 小於 0 : 第一個元素 會被排到 第二個元素 之前</span><br><span class="hljs-comment"> *            - 等於 0 : 不變</span><br><span class="hljs-comment"> *            - 大於 0 : 第一個元素 會被排到 第二個元素 後面</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    排序後的原陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> compareFunction = <span class="hljs-function">(<span class="hljs-params">firstEl, secondEl</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (firstEl &lt; secondEl) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> (firstEl &gt; secondEl) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arr1.sort(compareFunction)) <span class="hljs-comment">// [5, 4, 3, 2, 1]</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [5, 4, 3, 2, 1]</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 箭頭函數 + 返回值的正負特性</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 當 第二個元素(b) 減 第一個元素(a) 的值</span><br><span class="hljs-comment"> *  - 小於 0 : 第一個元素 會被排到 第二個元素 之前</span><br><span class="hljs-comment"> *  - 等於 0 : 不變</span><br><span class="hljs-comment"> *  - 大於 0 : 第一個元素 會被排到 第二個元素 後面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr2.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a)) <span class="hljs-comment">// [10, 9, 8, 7, 6]</span><br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">// [10, 9, 8, 7, 6]</span><br></code></pre></td></tr></table></figure><h4 id="reverse">reverse</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    顛倒陣列。（第一個元素變成最後一個，最後一個元素變成第一個）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.reverse()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    顛倒後的原陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改原陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.reverse()) <span class="hljs-comment">// [5, 4, 3, 2, 1]</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [5, 4, 3, 2, 1]</span><br><span class="hljs-built_in">console</span>.log(arr1.reverse()) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="搜尋">搜尋</h3><h4 id="filter">filter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    根據回調函式過濾後返回新的陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.filter(callback(element[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，用於遍歷測試陣列中的每個元素。</span><br><span class="hljs-comment"> *          返回 true 代表通過測試，保留該元素，</span><br><span class="hljs-comment"> *          返回 false 則不保留。</span><br><span class="hljs-comment"> *        - element : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 filter 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    通過回調函式保留元素後的新陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    返回值類型一定是陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.filter(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)) <span class="hljs-comment">// [2, 4]</span><br><span class="hljs-built_in">console</span>.log(arr1.filter(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>)) <span class="hljs-comment">// [1, 3, 5]</span><br><span class="hljs-built_in">console</span>.log(arr1.filter(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem &gt; <span class="hljs-number">2</span>)) <span class="hljs-comment">// [3, 4, 5]</span><br><span class="hljs-built_in">console</span>.log(arr1.filter(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem == <span class="hljs-number">4</span>)) <span class="hljs-comment">// [4]</span><br><br><span class="hljs-built_in">console</span>.log(arr1)) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="find-findIndex">find / findIndex</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    - find : 根據回調函式返回第一個滿足的元素。</span><br><span class="hljs-comment"> *    - findIndex : 根據回調函式返回第一個滿足的元素索引值。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.find(callback(element[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，用於遍歷測試陣列中的每個元素。</span><br><span class="hljs-comment"> *          返回 true 代表通過測試，&quot;返回該元素&quot; 並停止遍歷。</span><br><span class="hljs-comment"> *        - element : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 filter 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    array.findIndex(callback(element[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，用於遍歷測試陣列中的每個元素。</span><br><span class="hljs-comment"> *          返回 true 代表通過測試，&quot;返回該元素的索引值&quot; 並停止遍歷。</span><br><span class="hljs-comment"> *        - element : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 filter 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    - find : 通過回調函式後的 元素</span><br><span class="hljs-comment"> *    - findIndex : 通過回調函式後的 元素索引值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    返回值的類型不一定是陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.find(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)) <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(arr1.find(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(arr1.find(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem &gt; <span class="hljs-number">2</span>)) <span class="hljs-comment">// 3</span><br><span class="hljs-built_in">console</span>.log(arr1.find(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem == <span class="hljs-number">4</span>)) <span class="hljs-comment">// 4</span><br><br><span class="hljs-built_in">console</span>.log(arr1.findIndex(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(arr1.findIndex(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>)) <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(arr1.findIndex(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem &gt; <span class="hljs-number">2</span>)) <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(arr1.findIndex(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem == <span class="hljs-number">4</span>)) <span class="hljs-comment">// 3</span><br><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="indexOf-lastIndexOf">indexOf / lastIndexOf</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    - indexOf : 根據傳入的值返回第一個查找到的元素索引值。（從頭部開始查找）</span><br><span class="hljs-comment"> *    - lastIndexOf : 根據傳入的值返回第一個查找到的的元素索引值。（從尾部開始查找）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.indexOf(searchElement[, fromIndex])</span><br><span class="hljs-comment"> *      - searchElement : 要查找的元素</span><br><span class="hljs-comment"> *      - fromIndex [可選] : 開始查找的索引值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    array.lastIndexOf(searchElement[, fromIndex])</span><br><span class="hljs-comment"> *      - searchElement : 要查找的元素</span><br><span class="hljs-comment"> *      - fromIndex [可選] : 開始查找的索引值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    - indexOf : 查找到元素的索引值，若查找不到則返回 -1</span><br><span class="hljs-comment"> *    - lastIndexOf : 查找到元素的索引值，若查找不到則返回 -1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    indexOf 與 lastIndexOf 都是採用嚴格相等，嚴格相等對 NaN 無效。</span><br><span class="hljs-comment"> *    如果想要查找的元素離頭部比較近則使用 indexOf，否則使用 lastIndexOf，</span><br><span class="hljs-comment"> *      如果該陣列的元素非常多，可能會有查找速度緩慢的問題。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.indexOf(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(arr1.indexOf(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// -1</span><br><span class="hljs-built_in">console</span>.log(arr1.indexOf(<span class="hljs-string">&#x27;3&#x27;</span>)) <span class="hljs-comment">// -1</span><br><br><span class="hljs-built_in">console</span>.log(arr1.lastIndexOf(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(arr1.lastIndexOf(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)) <span class="hljs-comment">// -1</span><br><span class="hljs-built_in">console</span>.log(arr1.lastIndexOf(<span class="hljs-string">&#x27;3&#x27;</span>)) <span class="hljs-comment">// -1</span><br><br><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-literal">NaN</span>]<br><span class="hljs-built_in">console</span>.log(arr3.indexOf(<span class="hljs-literal">NaN</span>)) <span class="hljs-comment">// -1</span><br><span class="hljs-built_in">console</span>.log(arr3.lastIndexOf(<span class="hljs-literal">NaN</span>)) <span class="hljs-comment">// -1</span><br><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="includes">includes</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    根據傳入的值如果找到則返回布林值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.includes(searchElement[, fromIndex])</span><br><span class="hljs-comment"> *      - searchElement : 要查找的元素</span><br><span class="hljs-comment"> *      - fromIndex [可選] : 開始查找的索引值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    根據傳入的值如果找到則返回 true　否則返回 false</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.includes(<span class="hljs-number">3</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(arr1.includes(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(arr1.includes(<span class="hljs-string">&#x27;3&#x27;</span>)) <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-literal">NaN</span>]<br><span class="hljs-built_in">console</span>.log(arr3.includes(<span class="hljs-literal">NaN</span>)) <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="遍歷">遍歷</h3><h4 id="for-…-of">for … of</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    對可疊代物件進行遍歷（包括 Array, Map, Set, String, TypedArray, arguments 等等）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    for (variable of iterable) &#123;</span><br><span class="hljs-comment"> *      ...</span><br><span class="hljs-comment"> *    &#125;</span><br><span class="hljs-comment"> *      - variable : 當前遍歷到的元素</span><br><span class="hljs-comment"> *      - iterable : 可疊代物件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr1) &#123;<br>  <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h4 id="forEach">forEach</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    對陣列中的每個元素調用一次指定的函示</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.forEach(callback(item[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，該函式會對每一個元素調用一次。</span><br><span class="hljs-comment"> *        - item : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 forEach 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> */</span><br>arr1.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(item)<br>&#125;)<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h4 id="reduce-reduceRight">reduce / reduceRight</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    對陣列中的每個元素進行累加計算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.reduce(callback(accumulator, item[, index, array), initial])</span><br><span class="hljs-comment"> *      - callback : 回調函式，該函式會對每一個元素調用一次。</span><br><span class="hljs-comment"> *        - accumulator : 用於累加上一個函式返回的結果，；第一次等於 initial（如果有的話）。</span><br><span class="hljs-comment"> *        - item : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 forEach 的陣列自身</span><br><span class="hljs-comment"> *      - initial [可選] : 指定 accumulator 的初始值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    返回 accumulator 累加後的結果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.reduce(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item)) <span class="hljs-comment">// 15</span><br><span class="hljs-built_in">console</span>.log(arr1.reduce(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item + <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)) <span class="hljs-comment">// 120</span><br></code></pre></td></tr></table></figure><h4 id="map">map</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    對陣列中的每個元素調用指定函示，並返回陣列結果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.map(callback(item[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，該函式會對每一個元素調用一次。</span><br><span class="hljs-comment"> *        - item : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 forEach 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    將每個回調函式返回的結果按照順序作為新的陣列中的元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>)) <span class="hljs-comment">// [2, 4, 6, 8, 10]</span><br><span class="hljs-built_in">console</span>.log(arr1.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> [index, item * <span class="hljs-number">2</span>]))<br><span class="hljs-comment">// [[0, 2], [1, 4], [2, 6], [3, 8], [4, 10]]</span><br></code></pre></td></tr></table></figure><h4 id="flat">flat</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    按照指定的深度遞規遍歷陣列，並將遍歷到的所有元素合併至新陣列並返回</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.flat([depth])</span><br><span class="hljs-comment"> *      - depth [可選] : 指定深度；預設為 1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    根據深度所返回的所有元素並合併後的陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> test = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, [<span class="hljs-number">5</span>]]]<br><br><span class="hljs-built_in">console</span>.log(test.flat()) <span class="hljs-comment">// [1, 2, 3, 4, [5]]</span><br><span class="hljs-built_in">console</span>.log(test.flat(<span class="hljs-number">2</span>)) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="flatMap">flatMap</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    具有 flat(1) 和 map 的特性</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.flatMap(callback(item[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，該函式會對每一個元素調用一次。</span><br><span class="hljs-comment"> *        - item : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 forEach 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    將每個回調函式返回的結果，按照順序作為新陣列中的元素（具有 flat 深度為 1 的特性）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> test = [<span class="hljs-string">&#x27;今天天氣真不錯&#x27;</span>, <span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;早上好！&#x27;</span>]<br><br><span class="hljs-built_in">console</span>.log(test.flatMap(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.split(<span class="hljs-string">&#x27;&#x27;</span>)))<br><span class="hljs-comment">// [&#x27;今&#x27;, &#x27;天&#x27;, &#x27;天&#x27;, &#x27;氣&#x27;, &#x27;真&#x27;, &#x27;不&#x27;, &#x27;錯&#x27;, &#x27;，&#x27;, &#x27;早&#x27;, &#x27;上&#x27;, &#x27;好&#x27;, &#x27;！&#x27;]</span><br><br><span class="hljs-comment">// 對比 map</span><br><span class="hljs-built_in">console</span>.log(test.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.split(<span class="hljs-string">&#x27;&#x27;</span>)))<br><span class="hljs-comment">// [[&#x27;今&#x27;, &#x27;天&#x27;, &#x27;天&#x27;, &#x27;氣&#x27;, &#x27;真&#x27;, &#x27;不&#x27;, &#x27;錯&#x27;], [&#x27;，&#x27;], [&#x27;早&#x27;, &#x27;上&#x27;, &#x27;好&#x27;, &#x27;！&#x27;]]</span><br></code></pre></td></tr></table></figure><h4 id="some">some</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    判斷是否有元素否符合函示條件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.some(callback(item[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，該函式會對每一個元素調用一次。</span><br><span class="hljs-comment"> *        - item : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 forEach 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    若有元素符合函示條件則返回 true　否則返回 false</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">4</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(arr1.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">6</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="every">every</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    判斷所有元素是否符合函示條件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.every(callback(item[, index, array), thisArg])</span><br><span class="hljs-comment"> *      - callback : 回調函式，該函式會對每一個元素調用一次。</span><br><span class="hljs-comment"> *        - item : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 調用 forEach 的陣列自身</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 callback 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    若有元素符合函示條件則返回 true　否則返回 false</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.every(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-keyword">typeof</span> item === <span class="hljs-string">&#x27;number&#x27;</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(arr1.every(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">4</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="復製">復製</h3><h4 id="slice">slice</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    淺複製陣列並返回新陣列，可指定開始與結束索引值。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.slice([start, end])</span><br><span class="hljs-comment"> *      - start [可選] : 開始複製的索引值；預設為 0</span><br><span class="hljs-comment"> *      - end [可選] : 結束複製的索引值（不包括結束索引值）；預設為數組長度</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    淺複製後的 新陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.slice()) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br><span class="hljs-built_in">console</span>.log(arr1.slice(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// [2, 3]</span><br></code></pre></td></tr></table></figure><h4 id="concat">concat</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    複製多個陣列，並合併後返回</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.concat(arg[, argN...])</span><br><span class="hljs-comment"> *      - arg : 合並的第一個參數</span><br><span class="hljs-comment"> *      - argN [可選] : 合並的其他參數</span><br><span class="hljs-comment"> *        （參數可以是 陣列、值）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    返回合併後的 新陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.concat(arr2))<br><span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><br><span class="hljs-built_in">console</span>.log(arr1.concat(arr2, <span class="hljs-number">11</span>, [<span class="hljs-number">12</span>], [[<span class="hljs-number">13</span>]]))<br><span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, [13]]</span><br></code></pre></td></tr></table></figure><h4 id="copyWithin">copyWithin</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    複製陣列某部分的元素，並覆蓋到指定的索引值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    array.copyWithin(target[, start, end])</span><br><span class="hljs-comment"> *      - target : 被覆蓋的開始索引值</span><br><span class="hljs-comment"> *      - start [可選] : 開始複製索引值；預設為 0</span><br><span class="hljs-comment"> *      - end [可選] : 結束複製索引值（不包括結束索引值）；預設為原陣列長度 （.length）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    返回覆蓋後的 原陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法會修改 原陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(arr1.copyWithin(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// [1, 4, 3, 4, 5]</span><br><span class="hljs-built_in">console</span>.log(arr1.copyWithin(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment">// [1, 4, 1, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="其他">其他</h3><h4 id="Array-isArray">Array.isArray</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    判斷參數是否為陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    Array.isArray(value)</span><br><span class="hljs-comment"> *      - value : 被檢測的值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    若為陣列則返回 true　否則返回 false</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法不在實例物件上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr1)) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(<span class="hljs-string">&#x27;[1, 2, 3, 4, 5]&#x27;</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="Array-from">Array.from</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    可以將偽陣列物件、可疊代物件，轉換成新的陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    Array.from(arrayLike[, mapFn(item, index, array), thisArg])</span><br><span class="hljs-comment"> *      - arrayLike : 被轉換的 偽陣列物件 或 可疊代物件</span><br><span class="hljs-comment"> *      - mapFn [可選] : 類似 map 方法裡的 callback 函示，會對每個元素調用</span><br><span class="hljs-comment"> *        - item : 當前遍歷到的元素</span><br><span class="hljs-comment"> *        - index [可選] : 當前遍歷到的元素索引值</span><br><span class="hljs-comment"> *        - array [可選] : 注意：這裡的 array 是 undefined</span><br><span class="hljs-comment"> *      - thisArg [可選] : 指定 mapFn 裡的 this 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    返回轉換 偽陣列物件 或 可疊代物件 後的新陣列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    該方法不在實例物件上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(<span class="hljs-string">&#x27;Hello&#x27;</span>)) <span class="hljs-comment">// [&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>)) <span class="hljs-comment">// [2, 4, 6]</span><br><br><span class="hljs-comment">// 利用 偽陣列物件 的特性</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">5</span> &#125;, <span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> <span class="hljs-number">1</span>)) <span class="hljs-comment">// [1, 1, 1, 1, 1]</span><br></code></pre></td></tr></table></figure><h4 id="Array-of">Array.of</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    用於創建新的陣列，不需考慮參數的數量或類型。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    Array.of(elemN)</span><br><span class="hljs-comment"> *      - elemN : 任意參數</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    返回新陣列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.of(<span class="hljs-number">3</span>)) <span class="hljs-comment">// [3]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// [1, 2, 3]</span><br><br><span class="hljs-comment">// 對比 Array 構造函式</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>)) <span class="hljs-comment">// [ , , ] // 注意：這裡是創建了空位，並不是 3 個 undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h4 id="split-join">split / join</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 說明：</span><br><span class="hljs-comment"> *    - string.split : 分割字符串並返回陣列。</span><br><span class="hljs-comment"> *    - array.join : 將陣列串接並返回字符串。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 語法：</span><br><span class="hljs-comment"> *    string.split([separator, limit])</span><br><span class="hljs-comment"> *      - separator [可選] : 指定分割用的字符串（也可以是正則表達式）；</span><br><span class="hljs-comment"> *          省略則返回的陣列包含一個由整個字符串組成的元素。</span><br><span class="hljs-comment"> *      - limit [可選] : 限制返回分割的元素數量。（非負整數）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    array.join([separator])</span><br><span class="hljs-comment"> *      - separator [可選] : 指定元素串接之間的字符；預設為陣列用的逗號（,）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *    - string.split : 返回以分隔字符分割的陣列</span><br><span class="hljs-comment"> *    - array.join : 返回以特定字符串接的字符串</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> *    string.split 是字符串方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;Hello World&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(str.split()) <span class="hljs-comment">// [&#x27;Hello World&#x27;]</span><br><span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">5</span>)) <span class="hljs-comment">// [&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span><br><span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27;o&#x27;</span>)) <span class="hljs-comment">// [&#x27;Hell&#x27;, &#x27;W&#x27;, &#x27;rld&#x27;]</span><br><span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// [&#x27;Hello&#x27;, &#x27;World&#x27;]</span><br><br><span class="hljs-built_in">console</span>.log(str) <span class="hljs-comment">// &#x27;Hello World&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(arr1.join()) <span class="hljs-comment">// &#x27;1,2,3,4,5&#x27;</span><br><span class="hljs-built_in">console</span>.log(arr1.join(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// &#x27;12345&#x27;</span><br><span class="hljs-built_in">console</span>.log(arr1.join(<span class="hljs-string">&#x27;-&#x27;</span>)) <span class="hljs-comment">// &#x27;1-2-3-4-5&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><hr><p>封面來源 ：</p><ul><li><a href="https://www.pixiv.net/artworks/89478038">もち - 湊あくあ~</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 網頁前端 </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用指令</title>
      <link href="posts/e35f/"/>
      <url>posts/e35f/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 設定本地 使用者 名稱/信箱 （初次使用必須設定）</span><br>git config --global user.name<br>git config --global user.email<br><br><span class="hljs-comment">## 初始化本地倉庫</span><br>git init<br><br><span class="hljs-comment">## 查看本地倉庫狀態</span><br>git status<br><br><span class="hljs-comment">## 追蹤檔案至暫存區</span><br>git add <span class="hljs-string">&#x27;檔案名稱&#x27;</span><br><br><span class="hljs-comment">## 提交至本地庫</span><br>git commit -m <span class="hljs-string">&#x27;日誌訊息&#x27;</span> <span class="hljs-string">&#x27;檔案名稱&#x27;</span><br><br><span class="hljs-comment">## 查看日誌</span><br>git reflog<br><br><span class="hljs-comment">## 查看詳細日誌</span><br>git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment">## 版本穿梭</span><br>git reset --hard <span class="hljs-string">&#x27;版本號&#x27;</span><br><br><span class="hljs-comment">## 撤回上一個 commit</span><br>git reset --soft HEAD^<br><br><span class="hljs-comment">## === 分支 ===</span><br><br><span class="hljs-comment">## 創建分支</span><br>git branch <span class="hljs-string">&#x27;分支名稱&#x27;</span><br><br><span class="hljs-comment">## 查看分支</span><br>git branch<br><br><span class="hljs-comment">## 切換分支（切換至目標分支）</span><br>git checkout <span class="hljs-string">&#x27;分支名稱&#x27;</span><br><br><span class="hljs-comment">##　合併分支（將目標分支合併至當前分支）</span><br>git merge <span class="hljs-string">&#x27;分支名稱&#x27;</span><br><br><br><span class="hljs-comment">## === 遠程倉庫 ===</span><br><br><span class="hljs-comment">## 查看當前所有 遠程倉庫地址別名</span><br>git remote -v<br><br><span class="hljs-comment">## 新增地址別名</span><br>git remote add <span class="hljs-string">&#x27;地址別名&#x27;</span> <span class="hljs-string">&#x27;遠程倉庫地址&#x27;</span><br><br><span class="hljs-comment">## 推送 本地&quot;分支&quot; 的內容至 遠程倉庫</span><br>git push <span class="hljs-string">&#x27;地址別名&#x27;</span> <span class="hljs-string">&#x27;分支名稱&#x27;</span><br><br><span class="hljs-comment">## 將 遠程倉庫 的內容 復製到本地</span><br>git <span class="hljs-built_in">clone</span> <span class="hljs-string">&#x27;遠程倉庫地址&#x27;</span><br><br><span class="hljs-comment">## 將 遠程倉庫分支 的最新內容拉取下來後與 當前本地分支合併</span><br>git pull <span class="hljs-string">&#x27;遠程倉庫 地址/別名&#x27;</span> <span class="hljs-string">&#x27;遠程分支名稱&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>封面來源 ：</p><ul><li><a href="https://www.pixiv.net/artworks/86561567">SuperPig - ホロライブ！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
